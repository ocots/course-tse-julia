{
  "hash": "2e31aacff1c38f5ea42018309ef52f58",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Test\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\n::: {#f096f6cb .cell execution_count=2}\n``` {.julia .cell-code}\n@myshow begin #| hide\nx = 10          # x is inferred to be of type Int64\ny = 3.14        # y is inferred to be of type Float64\nz = \"Hello\"     # z is inferred to be of type String\n\ntypeof(x), typeof(y), typeof(z)\nend false #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> x = 10\njulia> y = 3.14\njulia> z = \"Hello\"\njulia> (typeof(x), typeof(y), typeof(z)) = (Int64, Float64, String)\n```\n:::\n:::\n\n\n::: {#5a37d863 .cell execution_count=3}\n``` {.julia .cell-code}\n@myshow begin #| hide\na = 1+0\na + 2\nb = 1\nb\ng(x) = 2\ng(3)\nfunction f(x)\n    return x + 2\nend\nf(3)\nfunction make_closure(x)\n    return (y) -> x*y\nend\ndouble = make_closure(2)\ndouble(3)\n1 + \"2\"\nend false #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> a = 1\njulia> a + 2 = 3\njulia> b = 1\njulia> b = 1\njulia> g(x) = begin\n        2\n    end\njulia> g(3) = 2\njulia> function f(x)\n    return x + 2\nend\njulia> f(3) = 5\njulia> function make_closure(x)\n    return (y->begin\n                x * y\n            end)\nend\njulia> double = make_closure(2)\njulia> double(3) = 6\njulia> 1 + \"2\"\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching +(::Int64, ::String)\nThe function `+` exists, but no method is defined for this combination of argument types.\n\nClosest candidates are:\n  +(::Any, ::Any, <span class=\"ansi-bright-red-fg\">::Any</span>, <span class=\"ansi-bright-red-fg\">::Any...</span>)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">Base</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">operators.jl:596</span>\n  +(::Real, <span class=\"ansi-bright-red-fg\">::Complex{Bool}</span>)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">Base</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">complex.jl:322</span>\n  +(::Integer, <span class=\"ansi-bright-red-fg\">::AbstractChar</span>)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-bright-black-fg\">Base</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">char.jl:247</span>\n  ...\n\n\nStacktrace:\n [1] macro expansion\n   @ show.jl:1229 [inlined]\n [2] macro expansion\n   @ ~/Courses/julia/course-tse-julia/assets/julia/myshow.jl:82 [inlined]\n [3] top-level scope\n   @ In[122]:17</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#865a4058 .cell execution_count=4}\n``` {.julia .cell-code}\n# Define a simple struct for a point in 2D space\nstruct Point\n    x::Float64\n    y::Float64\nend\n```\n:::\n\n\n::: {#bdadbdbf .cell execution_count=5}\n``` {.julia .cell-code}\nstruct Circle\n    center::Point\n    radius::Float64\nend\n\n# Define a custom constructor\nfunction Circle(x::Real, y::Real, radius::Real)\n    if radius <= 0\n        throw(DomainError(radius, \"Radius must be positive\"))\n    end\n    Circle(Point(float(x), float(y)), float(radius))\nend\nnothing #| hide\n```\n:::\n\n\n::: {#52a0d363 .cell execution_count=6}\n``` {.julia .cell-code}\n@myshow begin #| hide\n# Create a Circle using the custom constructor\nc = Circle(0, 0, 5)  # Creates a Circle with center (0.0, 0.0) and radius 5.0\n\n# Attempt to create a Circle with an invalid radius\nc = Circle(0, 0, -3)  # Throws an error: \"Radius must be positive\"\nend false #| hide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\njulia> c = Circle(Point(0.0, 0.0), 5.0)\njulia> c = Circle(0, 0, -3)\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: DomainError with -3:\nRadius must be positive\nDomainError with -3:\nRadius must be positive\n\nStacktrace:\n [1] Circle(x::Int64, y::Int64, radius::Int64)\n   @ Main ./In[124]:9\n [2] macro expansion\n   @ ~/Courses/julia/course-tse-julia/assets/julia/myshow.jl:53 [inlined]\n [3] top-level scope\n   @ In[125]:7\n```\n:::\n:::\n\n\n",
    "supporting": [
      "test_files"
    ],
    "filters": [],
    "includes": {}
  }
}