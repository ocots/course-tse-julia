{
  "hash": "888a95ed6f7e49721bd4befad60ef88d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Foretaste of Julia code\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\n::: {#96c8ba59 .cell execution_count=2}\n``` {.julia .cell-code}\nx = 1\n2x\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n2\n```\n:::\n:::\n\n\n::: {#0eddc6f5 .cell execution_count=3}\n``` {.julia .cell-code}\nx = sqrt(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n1.4142135623730951\n```\n:::\n:::\n\n\n::: {#87785803 .cell execution_count=4}\n``` {.julia .cell-code}\n# unicode is great\nx = âˆš(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n1.4142135623730951\n```\n:::\n:::\n\n\n::: {#9bd6dc88 .cell execution_count=5}\n``` {.julia .cell-code}\nðŸ˜„ = sqrt(2)\n2ðŸ˜„\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n2.8284271247461903\n```\n:::\n:::\n\n\nSome functions.\n\n::: {#82ddd585 .cell execution_count=6}\n``` {.julia .cell-code}\n# this is a function\nfunction f(x)\n  return 2x+1\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {#f9d2c085 .cell execution_count=7}\n``` {.julia .cell-code}\n# this also\nf(x) = 2x+1\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {#6a38bb42 .cell execution_count=8}\n``` {.julia .cell-code}\n# this also: but f is not available anymore\ng = x -> 2x^2\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n#20 (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {#19597146 .cell execution_count=9}\n``` {.julia .cell-code}\n# be careful of the priorities\ng(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n2\n```\n:::\n:::\n\n\n::: {#2a29b4fa .cell execution_count=10}\n``` {.julia .cell-code}\nHello(name) = \"Hello \" * name * \"!\"\nHello(\"Alban\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n\"Hello Alban!\"\n```\n:::\n:::\n\n\n::: {#25e6f31e .cell execution_count=11}\n``` {.julia .cell-code}\nx = [1 3 12]\nprintln(\"x[2] = \", x[2])\nx[2] = 5\nprintln(\"x[2] = \", x[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx[2] = 3\nx[2] = 5\n```\n:::\n:::\n\n\nThe following function has side effects that can be dangerous.\n\n::: {#4191620c .cell execution_count=12}\n``` {.julia .cell-code}\nfunction f(x, y)\n    x[1] = 42      # mutates x\n    y = 7 + sum(x) # new binding for y, no mutation\n    return y\nend\n\na = [4, 5, 6]\nb = 3\n\nprintln(\"f($a, $b) = \", f(a, b))\nprintln(\"a = \", a, \" # a[1] is changed to 42 by f\")\nprintln(\"b = \", b, \" # not changed\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nf([4, 5, 6], 3) = 60\na = [42, 5, 6] # a[1] is changed to 42 by f\nb = 3 # not changed\n```\n:::\n:::\n\n\nWhen a function has [side effects](https://en.wikipedia.org/wiki/Side_effect_(computer_science)), please use the `!` convention. See [Argument Passing Behavior](https://docs.julialang.org/en/v1/manual/functions/#man-argument-passing).\n\n::: {#c02b175b .cell execution_count=13}\n``` {.julia .cell-code}\nfunction put_at_second_place!(x, value)\n  x[2] = value\n  return nothing\nend\n\nx = [1 3 12]\nprintln(\"x[2] = \", x[2])\n\nput_at_second_place!(x, 5)\nprintln(\"x[2] = \", x[2])\n\nput_at_second_place!(x[1:3], 15) # be careful if you give a slice\nprintln(\"x[2] = \", x[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx[2] = 3\nx[2] = 5\nx[2] = 5\n```\n:::\n:::\n\n\nA function may have several methods.\n\n::: {#92cb0d28 .cell execution_count=14}\n``` {.julia .cell-code}\nÎ£(x::Float64, y::Float64) = 2x + y\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nÎ£ (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {#26ad7765 .cell execution_count=15}\n``` {.julia .cell-code}\nÎ£(2.0, 3.0)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n7.0\n```\n:::\n:::\n\n\n::: {#57d928fe .cell execution_count=16}\n``` {.julia .cell-code}\nÎ£(2, 3.0)\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching Î£(::Int64, ::Float64)\nThe function `Î£` exists, but no method is defined for this combination of argument types.\n\nClosest candidates are:\n  Î£(<span class=\"ansi-bright-red-fg\">::Float64</span>, ::Float64)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[15]:1</span>\n\n\nStacktrace:\n [1] top-level scope\n   @ In[17]:1</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a89500b1 .cell execution_count=17}\n``` {.julia .cell-code}\nh(x::Number,  y::Number ) = 2x - y\nh(x::Int,     y::Int    ) = 2x * y\nh(x::Float64, y::Float64) = 2x + y\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nh (generic function with 3 methods)\n```\n:::\n:::\n\n\n::: {#ce763b6f .cell execution_count=18}\n``` {.julia .cell-code}\nprintln(\"h(2,   3.0) = \", h(2, 3.0))\nprintln(\"h(2,   3  ) = \", h(2, 3))\nprintln(\"h(2.0, 3.0) = \", h(2.0, 3.0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nh(2,   3.0) = 1.0\nh(2,   3  ) = 12\nh(2.0, 3.0) = 7.0\n```\n:::\n:::\n\n\n",
    "supporting": [
      "getting_started-foretaste_of_julia_code_files"
    ],
    "filters": [],
    "includes": {}
  }
}