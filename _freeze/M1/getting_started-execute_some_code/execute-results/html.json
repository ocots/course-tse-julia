{
  "hash": "cb444a298e91d39178720812764fd5e9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Executing Julia Code\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\nThis part is partially inspired from the post [Writing your code](https://modernjuliaworkflows.org/writing/) of the website \n[Modern Julia Workflows](https://modernjuliaworkflows.org), where you can find tips to make the coding experience more \npleasant and efficient.\n\n## Getting help\n\nBefore you write any line of code, it's good to know where to find help.\nThe official [help page](https://julialang.org/about/help/) is a good place to start.\nIn particular, the Julia [community](https://julialang.org/community/) is always happy to guide beginners.\n\nAs a rule of thumb, the [Discourse forum](https://discourse.julialang.org/) is where you should ask your questions to make the answers discoverable for future users.\nIf you just want to chat with someone, you have a choice between the open source [Zulip](https://julialang.zulipchat.com/register/) and the closed source [Slack](https://julialang.org/slack/).\nSome of the vocabulary used by community members may appear unfamiliar, but don't worry: [StartHere.jl](https://github.com/JuliaCommunity/StartHere.jl) gives you a good overview.\n\n## Installation\n\nJulia can be easily downloaded and installed. See the [download page](https://julialang.org/downloads/) where we can find the following.\n\n::: {.panel-tabset}\n\n### Mac / Linux\n\nInstall the latest Julia version by running this in your terminal:\n\n``` {.bash}\ncurl -fsSL https://install.julialang.org | sh\n```\n\n### Windows\n\nInstall the latest Julia version from the [Microsoft Store](https://www.microsoft.com/store/apps/9NJNWW8PVKMN) by running this in the command prompt:\n\n``` {.bash}\nwinget install julia -s msstore\n```\n:::\n\nThere are different ways to write and execute some Julia code:\n\n- within a `.ipynb` file, that is a Jupyter notebook;\n- directly into the Julia REPL;\n- from a script file `.jl`, either in the REPL or in the terminal;\n- ...\n\n## Jupyter notebooks\n\nYou can write some Julia code inside a [Jupyter notebook](https://jupyter.org) and execute the code. \nTo use it with Julia, you will need to install the [IJulia.jl](https://github.com/JuliaLang/IJulia.jl) backend.\nThen, if you have also [installed Jupyter](https://jupyter.org/install) with `pip install jupyterlab`, you can run this command to launch the server:\n\n```bash\njupyter lab\n```\n\nIf you only have IJulia.jl on your system, you can run this:\n\n```julia\nusing IJulia\nIJulia.notebook()\n```\n\n::: {.callout-tip}\nJupyter notebooks can be opened, modified and run directly from VS Code.\nThanks to the Julia extension, you don't even need to install IJulia.jl or Jupyter first.\n:::\n\nTry to execute the code of [example.ipynb](data/introduction/example.ipynb). You can dowload it clicking on the following image.\n\n<a href=\"data/introduction/example.ipynb\" download>\n  <img src=\"../assets/images/jupyter-file.png\" width=\"50\">\n</a>\n\n## REPL\n\nJulia comes with a full-featured interactive [command-line REPL](https://docs.julialang.org/en/v1/stdlib/REPL/) (read-eval-print loop) built into\nthe `julia` executable. In addition to allowing quick and easy evaluation of Julia statements,\nit has a searchable history, tab-completion, many helpful keybindings, and dedicated help and\nshell modes. The REPL can be started by simply calling `julia` with no arguments or double-clicking\non the executable:\n\n::: {#5574f843 .cell execution_count=2}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=3}\n```julia\n$ julia\n\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.11.1 (2024-10-16)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\n\njulia>\n```\n\n:::\n:::\n\n\nAfter Julia is launched you can start computing.\n\n::: {#ed87f02f .cell execution_count=3}\n``` {.julia .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2\n```\n:::\n:::\n\n\nOr print some text.\n\n::: {#63df5b48 .cell execution_count=4}\n``` {.julia .cell-code}\nprint(\"Hello!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello!\n```\n:::\n:::\n\n\n::: {.callout-important icon=false}\nThe Julia REPL has different prompt modes that can be very useful to install / remove packages, run shell commands, search for help, etc.\nThe different modes are:\n\n- The Julian mode\n- Help mode\n- Package mode\n- Shell mode\n\nVisit the [command-line REPL page](https://docs.julialang.org/en/v1/stdlib/REPL/) for more details.\n:::\n\n::: {.panel-tabset}\n\n### Help mode\n\nBy pressing `?` you can obtain information and metadata about Julia objects (functions, types, etc.) or unicode symbols.\nThe query fetches the docstring of the object, which explains how to use it.\n\n```julia\nhelp?> println\n```\n\nIf you don't know the exact name you are looking for, type a word surrounded by quotes to see in which docstrings it pops up.\nTo come back to Julia mode, hit backspace.\n\n### Package mode\n\nBy pressing `]` you access [Pkg.jl](https://github.com/JuliaLang/Pkg.jl), Julia's integrated package manager.\nPlease visit the [documentation](https://pkgdocs.julialang.org/v1/getting-started/) for details.\nPkg.jl allows you to:\n\n* `]activate` different local, shared or temporary environments;\n* `]instantiate` them by downloading the necessary packages;\n* `]add`, `]update` (or `]up`) and `]remove` (or `]rm`) packages;\n* get the `]status` (or `]st`) of your current environment.\n\nAs an illustration, we download the package Plots.jl inside our current environment:\n\n```julia\npkg> add Plots\n```\n\nNote that you can do the same in Julia mode:\n\n```julia\njulia> using Pkg\njulia> Pkg.rm(\"Plots\")\n```\n\nThe package mode itself also has a help mode, accessed with `?`.\nTo come back to Julia mode, hit backspace.\n\n### Shell mode\n\nBy pressing `;` you enter a terminal, where you can execute any command you want.\nHere's an example for Unix systems:\n\n```julia\nshell> pwd\n```\n\nTo come back to Julia mode, hit backspace.\n\n:::\n\n## Julia scripts\n\n\n\nYou can also write some code in a `.jl` script.\n\n::: {#62152c99 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=7}\n```julia\n$ cat example.jl\n\nprintln(\"Hello!\")\n\n```\n\n:::\n:::\n\n\nand execute the code either in the REPL:\n\n::: {#795aa0ce .cell execution_count=7}\n``` {.julia .cell-code}\ninclude(\"example.jl\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello!\n```\n:::\n:::\n\n\nor in a terminal with the command `$ julia example.jl`.\n\n\n\nTry to execute the code of [example.jl](data/introduction/example.jl). You can dowload it clicking on the following image.\n\n<a href=\"data/introduction/example.jl\" download>\n  <img src=\"../assets/images/julia-file.png\" width=\"50\">\n</a>\n\n",
    "supporting": [
      "getting_started-execute_some_code_files"
    ],
    "filters": [],
    "includes": {}
  }
}