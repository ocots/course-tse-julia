{
  "hash": "28fb7f35ff73230c0bdb2d4a142bd1d3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"How to execute some Julia code\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\n## Getting help\n\nBefore you write any line of code, it's good to know where to find help.\nThe official [help page](https://julialang.org/about/help/) is a good place to start.\nIn particular, the Julia [community](https://julialang.org/community/) is always happy to guide beginners.\n\nAs a rule of thumb, the [Discourse forum](https://discourse.julialang.org/) is where you should ask your questions to make the answers discoverable for future users.\nIf you just want to chat with someone, you have a choice between the open source [Zulip](https://julialang.zulipchat.com/register/) and the closed source [Slack](https://julialang.org/slack/).\nSome of the vocabulary used by community members may appear unfamiliar, but don't worry: [StartHere.jl](https://github.com/JuliaCommunity/StartHere.jl) gives you a good overview.\n\n\n## Installation\n\nJulia can be easily downloaded and installed. See the [download page](https://julialang.org/downloads/) where we can find the following.\n\n::: {.panel-tabset}\n\n### Mac / Linux\n\nInstall the latest Julia version by running this in your terminal:\n\n``` {.bash}\ncurl -fsSL https://install.julialang.org | sh\n```\n\n### Windows\n\nInstall the latest Julia version from the [Microsoft Store](https://www.microsoft.com/store/apps/9NJNWW8PVKMN) by running this in the command prompt:\n\n``` {.bash}\nwinget install julia -s msstore\n```\n:::\n\nThere are different ways to execute Julia code:\n\n- within a `.ipynb` file, that is a Jupyter notebook;\n- directly into the Julia REPL;\n- from a script file `.jl`, either in the REPL or in the terminal;\n- ...\n\n## Jupyter notebooks\n\n<img height=\"100px\" style=\"margin-left:15px; margin-right:15px; float: right;\" src=\"../assets/images/logo-jupyter.svg\"/>\n\nYou can write some Julia code inside a [Jupyter notebook](https://jupyter.org) and execute the code. To interact with the Julia language using Jupyter notebook, please install [IJulia.jl](https://github.com/JuliaLang/IJulia.jl).\n\n> **IJulia** is a [Julia-language](http://julialang.org/) backend\ncombined with the [Jupyter](http://jupyter.org/) interactive\nenvironment (also used by [IPython](http://ipython.org/)).  This\ncombination allows you to interact with the Julia language using\nJupyter/IPython's powerful [graphical\nnotebook](http://ipython.org/notebook.html), which combines code,\nformatted text, math, and multimedia in a single document.\nIJulia is a Jupyter language kernel and works with a variety of notebook\nuser interfaces. In addition to the classic Jupyter Notebook, IJulia\nalso works with [JupyterLab](https://jupyterlab.readthedocs.io/en/stable/), a Jupyter-based\nintegrated development environment for notebooks and code.\nThe [nteract notebook desktop](https://nteract.io/) supports IJulia with\ndetailed instructions for its [installation with nteract](https://nteract.io/kernels/julia).\n\nTry to execute the code of [example.ipynb](data/introduction/example.ipynb).\n\n## The Julia REPL\n\nJulia comes with a full-featured interactive [command-line REPL](https://docs.julialang.org/en/v1/stdlib/REPL/) (read-eval-print loop) built into\nthe `julia` executable. In addition to allowing quick and easy evaluation of Julia statements,\nit has a searchable history, tab-completion, many helpful keybindings, and dedicated help and\nshell modes. The REPL can be started by simply calling `julia` with no arguments or double-clicking\non the executable:\n\n::: {#990db19c .cell execution_count=2}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=3}\n```julia\n$ julia\n\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.11.1 (2024-10-16)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\n\njulia>\n```\n\n:::\n:::\n\n\nAfter Julia is launched you can start computing.\n\n::: {#0754fda6 .cell execution_count=3}\n``` {.julia .cell-code}\n1+1\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n2\n```\n:::\n:::\n\n\nOr print some text.\n\n::: {#2b9e003e .cell execution_count=4}\n``` {.julia .cell-code}\nprint(\"Hello!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello!\n```\n:::\n:::\n\n\n::: {.callout-important icon=false}\nThe Julia REPL has different prompt modes that can be very useful to install / remove packages, run shell commands, search for help, etc.\nThe different modes are:\n\n- The Julian mode\n- Help mode\n- Shell mode\n- Pkg mode\n- Search modes\n\nVisit the [command-line REPL page](https://docs.julialang.org/en/v1/stdlib/REPL/) for more details.\n:::\n\n## Julia scripts\n\nYou can also write some code in a `.jl` script.\n\n::: {#87156ff1 .cell execution_count=5}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=6}\n```julia\n$ cat data/introduction/example.jl\n\nprintln(\"Hello!\")\n\n```\n\n:::\n:::\n\n\nand execute the code either in the REPL:\n\n::: {#39ca23f7 .cell execution_count=6}\n``` {.julia .cell-code}\ninclude(\"data/introduction/example.jl\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello!\n```\n:::\n:::\n\n\nor in a terminal with the command `$ julia example.jl`.\n\n",
    "supporting": [
      "getting_started-execute_some_code_files"
    ],
    "filters": [],
    "includes": {}
  }
}