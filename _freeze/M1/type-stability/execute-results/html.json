{
  "hash": "f19f619835b42e429277bdfe86018636",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Type stability in Julia\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\n## Type Stability in Julia\n\nIn Julia, **type stability** is a key concept for writing efficient code. Type stability means that the type of a variable or expression can be determined at compile time, enabling the Julia compiler to optimize the code. When working with advanced types, such as parametric abstract types, it's important to ensure that your code remains type stable, as this allows Julia's Just-In-Time (JIT) compiler to generate more efficient machine code.\n\n### Why is Type Stability Important?\n\nType instability can cause the JIT compiler to generate multiple versions of a function or method, which can degrade performance. Type stability, on the other hand, helps Julia avoid unnecessary runtime checks and ensures that the type of every variable is known before runtime.\n\nFor instance, if you define a function where the type of its output cannot be predicted based on the input types, Julia may have to fall back to a slower, more generic approach.\n\n### Example of Type Instability and Stability\n\nLet‚Äôs consider an example using parametric types:\n\n::: {#66c5324d .cell execution_count=2}\n``` {.julia .cell-code}\nfunction sum_elements(arr::Vector{T}) where T\n    s = 0\n    for x in arr\n        s += x  # Type instability: T is not known to be a number\n    end\n    return s\nend\nnothing #| hide\n```\n:::\n\n\nIn this case, the function `sum_elements` is type unstable because Julia cannot guarantee that `T` will always be a numeric type. This can lead to inefficiencies.\n\nNow, let's fix this by enforcing type stability:\n\n::: {#9919a764 .cell execution_count=3}\n``` {.julia .cell-code}\nfunction sum_elements(arr::Vector{T}) where T <: Number\n    s = zero(T)  # Start with the appropriate type for T\n    for x in arr\n        s += x\n    end\n    return s\nend\nnothing #| hide\n```\n:::\n\n\nIn this version, we restrict the type of `T` to be a subtype of `Number`, ensuring that the type of `s` is always numeric and enabling better performance through type stability.\n\n### Key Points for Ensuring Type Stability\n\n- Use **specific type annotations** whenever possible, especially with parametric types.\n- Avoid mixing types that could lead to ambiguities in the function‚Äôs return type.\n- Always initialize variables with types that are known, such as using `zero(T)` for numeric types.\n- When dealing with generic code, try to define methods that narrow the possible types of variables (e.g., `T <: Number`).\n\nEnsuring type stability not only helps with performance but also aids in catching potential type errors early during development.\n\n::: {.callout-note}\nTo ensure type stability, the return type of a function should be predictable based on the input types (and not the values), and the types of all variables should be known at compile time.\n:::\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Type Stability in Julia\n\n\n\n::: {#65242880 .cell execution_count=5}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=6}\n**Question 1. Why is type stability important in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#a9f72ac4 .cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<script>\nvar ID = \"bDZt9f2O\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='bDZt9f2O' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_bDZt9f2O\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_bDZt9f2O_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_bDZt9f2O\"\n              id=\"radio_bDZt9f2O_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It forces the use of static typing in all functions.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_bDZt9f2O_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_bDZt9f2O\"\n              id=\"radio_bDZt9f2O_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It makes code easier to write and debug.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_bDZt9f2O_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_bDZt9f2O\"\n              id=\"radio_bDZt9f2O_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It prevents type errors from occurring in the code.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_bDZt9f2O_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_bDZt9f2O\"\n              id=\"radio_bDZt9f2O_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It allows the Julia compiler to optimize code and avoid unnecessary runtime checks.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='bDZt9f2O_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_bDZt9f2O').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_bDZt9f2O')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_bDZt9f2O\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('bDZt9f2O_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_bDZt9f2O\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_bDZt9f2O\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#5f0e064b .cell execution_count=7}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=8}\n**Question 2. What is the issue with the following function in terms of type stability?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction sum_elements(arr::Vector{T}) where T\n    s = 0\n    for x in arr\n        s += x  # Type instability: T is not known to be a number\n    end\n    return s\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#b7660846 .cell execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<script>\nvar ID = \"gyjFF7CQ\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='gyjFF7CQ' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_gyjFF7CQ\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_gyjFF7CQ_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_gyjFF7CQ\"\n              id=\"radio_gyjFF7CQ_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The variable <code>s</code> is not initialized properly.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_gyjFF7CQ_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_gyjFF7CQ\"\n              id=\"radio_gyjFF7CQ_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The function does not return anything.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_gyjFF7CQ_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_gyjFF7CQ\"\n              id=\"radio_gyjFF7CQ_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        The type of <code>T</code> is not restricted to numeric types, leading to type instability.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_gyjFF7CQ_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_gyjFF7CQ\"\n              id=\"radio_gyjFF7CQ_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        The loop does not iterate over the array correctly.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='gyjFF7CQ_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_gyjFF7CQ').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_gyjFF7CQ')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_gyjFF7CQ\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('gyjFF7CQ_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_gyjFF7CQ\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_gyjFF7CQ\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#fc37f286 .cell execution_count=9}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=10}\n**Question 3. How is type stability ensured in the following corrected version of the code?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction sum_elements(arr::Vector{T}) where T <: Number\n    s = zero(T)  # Start with the appropriate type for T\n    for x in arr\n        s += x\n    end\n    return s\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#1016574b .cell execution_count=10}\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<script>\nvar ID = \"q4FVuRMR\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='q4FVuRMR' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_q4FVuRMR\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_q4FVuRMR_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_q4FVuRMR\"\n              id=\"radio_q4FVuRMR_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        By using an abstract type for the argument <code>arr</code>.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_q4FVuRMR_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_q4FVuRMR\"\n              id=\"radio_q4FVuRMR_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        By initializing <code>s</code> with a numeric zero value &#40;<code>zero&#40;T&#41;</code>&#41; and restricting <code>T</code> to <code>Number</code>.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_q4FVuRMR_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_q4FVuRMR\"\n              id=\"radio_q4FVuRMR_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        By defining a default return type for the function.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_q4FVuRMR_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_q4FVuRMR\"\n              id=\"radio_q4FVuRMR_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        By ensuring that <code>arr</code> is always of type <code>Vector&#123;Int&#125;</code>.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='q4FVuRMR_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_q4FVuRMR').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_q4FVuRMR')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_q4FVuRMR\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('q4FVuRMR_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_q4FVuRMR\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_q4FVuRMR\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#6d8fbf43 .cell execution_count=11}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=12}\n**Question 4. What does type instability typically cause in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#0d39062f .cell execution_count=12}\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<script>\nvar ID = \"GGZ4jQHw\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='GGZ4jQHw' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_GGZ4jQHw\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_GGZ4jQHw_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_GGZ4jQHw\"\n              id=\"radio_GGZ4jQHw_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It can cause the JIT compiler to generate multiple versions of a function, degrading performance.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_GGZ4jQHw_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_GGZ4jQHw\"\n              id=\"radio_GGZ4jQHw_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It allows Julia to use static typing for optimization.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_GGZ4jQHw_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_GGZ4jQHw\"\n              id=\"radio_GGZ4jQHw_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It can lead to more efficient code execution.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_GGZ4jQHw_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_GGZ4jQHw\"\n              id=\"radio_GGZ4jQHw_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It improves code readability and makes debugging easier.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='GGZ4jQHw_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_GGZ4jQHw').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_GGZ4jQHw')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_GGZ4jQHw\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('GGZ4jQHw_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_GGZ4jQHw\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_GGZ4jQHw\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#b316c029 .cell execution_count=13}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=14}\n**Question 5. Which of the following is a recommended strategy for ensuring type stability in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#15e01b5f .cell execution_count=14}\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<script>\nvar ID = \"d2g50sEl\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='d2g50sEl' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_d2g50sEl\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_d2g50sEl_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_d2g50sEl\"\n              id=\"radio_d2g50sEl_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Use specific type annotations and initialize variables with known types.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_d2g50sEl_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_d2g50sEl\"\n              id=\"radio_d2g50sEl_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Always avoid parametric types in functions.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_d2g50sEl_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_d2g50sEl\"\n              id=\"radio_d2g50sEl_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Use generic types in functions to handle various types without constraints.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_d2g50sEl_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_d2g50sEl\"\n              id=\"radio_d2g50sEl_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Avoid using any type annotations for function arguments.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='d2g50sEl_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_d2g50sEl').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_d2g50sEl')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_d2g50sEl\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('d2g50sEl_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_d2g50sEl\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_d2g50sEl\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "type-stability_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}