{
  "hash": "4bf5d415317d3d1046db0abf29752764",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Advanced Types and Error Handling in Julia\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\nIn this section, we will delve into some of the more advanced features of Julia's type system and error handling. We will explore the hierarchical structure of types, how to define and work with parametric types, as well as how to handle type conversions and promotions. Additionally, we will look at how to manage errors in Julia, including common error types and exception handling mechanisms.\n\nBy the end of this page, you'll have a deeper understanding of Julia's flexible and powerful type system, which is essential for writing efficient, type-safe code. We will also cover how to manage and handle errors gracefully to ensure that your programs run smoothly.\n\nTopics Covered:\n\n- **Type Hierarchies**: Understanding Julia's abstract and concrete types.\n- **Type Annotations and Declarations**: How to specify types in functions and variables.\n- **Parametric Types**: Creating generic types and functions.\n- **Type Conversion and Promotion**: Working with different types and converting between them.\n- **Union Types**: Handling multiple types in a single variable.\n- **Special Types**: Working with `Nothing`, `Any`, and `Missing`.\n- **Errors and Exception Handling**: Raising and handling errors with `try`/`catch` blocks.\n\n## Type Hierarchies\n\nIn Julia, types are organized into a hierarchy with `Any` as the root. At the top, `Any` is the most general type, and all other types are subtypes of `Any`. The type hierarchy enables Julia to provide flexibility while supporting efficient dispatch based on types.\n\n### Abstract and Concrete Types\n\nTypes in Julia can be **abstract** or **concrete**:\n- **Abstract types** serve as nodes in the hierarchy but cannot be instantiated. They provide a framework for organizing related types.\n- **Concrete types** can be instantiated and are the actual types used for values.\n\nFor example, Julia‚Äôs `Real` and `AbstractFloat` types are abstract, while `Int64` and `Float64` are concrete subtypes.\n\n::: {#591bc20c .cell execution_count=2}\n``` {.julia .cell-code}\nprintln(Int64 <: Real)          # true\nprintln(Float64 <: AbstractFloat) # true\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrue\ntrue\n```\n:::\n:::\n\n\n### Checking if a Type is Concrete\n\nIn Julia, you can use the `isconcretetype` function to check if a type is concrete (meaning it can be instantiated) or abstract (which serves as a blueprint for other types but cannot be instantiated directly).\n\n::: {#827dcc6a .cell execution_count=3}\n``` {.julia .cell-code}\nprintln(isconcretetype(Int64))        # true, Int64 is a concrete type\nprintln(isconcretetype(AbstractFloat)) # false, AbstractFloat is an abstract type\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrue\nfalse\n```\n:::\n:::\n\n\nThe `isconcretetype` function returns `true` for concrete types (like `Int64` or `Float64`) and `false` for abstract types (like `AbstractFloat` or `Real`). This can be useful when writing functions that need to differentiate between abstract and co\n\n### Get the Type of a Variable\n\nYou can use the `typeof()` function to get the type of a variable:\n\n::: {#61b22526 .cell execution_count=4}\n``` {.julia .cell-code}\na = 42\ntypeof(a)  # Output: Int64\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nInt64\n```\n:::\n:::\n\n\nThe `typeof()` function returns the concrete type of the variable.\n\n### The `isa` Operator\n\nThe `isa` operator is used to check if a value is an instance of a specific type:\n\n::: {#026f116a .cell execution_count=5}\n``` {.julia .cell-code}\na = 42\nprintln(a isa Int64)  # true\nprintln(a isa Number)  # true\nprintln(a isa Float64) # false\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrue\ntrue\nfalse\n```\n:::\n:::\n\n\nThe `isa` operator is often used for type checking within functions or when validating data.\n\n### The `<:` Operator\n\nThe `<:` operator checks if a type is a subtype of another type in the hierarchy. It can be used for checking if one type is a more general or more specific type than another:\n\n::: {#7fe209b6 .cell execution_count=6}\n``` {.julia .cell-code}\nprintln(Int64 <: Real)       # true, Int64 is a subtype of Real\nprintln(Float64 <: Real)     # true, Float64 is a subtype of Real\nprintln(Float64 <: Number)     # true, Float64 is a subtype of Number\nprintln(Int64 <: AbstractFloat) # false\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrue\ntrue\ntrue\nfalse\n```\n:::\n:::\n\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Type Hierarchies in Julia\n\n\n\n::: {#26ddedd0 .cell execution_count=8}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=9}\n**Question 1. What is the purpose of an abstract type in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#4f1a1972 .cell execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<script>\nvar ID = \"EJS9VzXN\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='EJS9VzXN' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_EJS9VzXN\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_EJS9VzXN_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_EJS9VzXN\"\n              id=\"radio_EJS9VzXN_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It defines a concrete implementation for other types.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_EJS9VzXN_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_EJS9VzXN\"\n              id=\"radio_EJS9VzXN_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It can be instantiated and used directly.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_EJS9VzXN_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_EJS9VzXN\"\n              id=\"radio_EJS9VzXN_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It provides a blueprint for organizing related types but cannot be instantiated.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_EJS9VzXN_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_EJS9VzXN\"\n              id=\"radio_EJS9VzXN_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It is used for type annotations in functions.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='EJS9VzXN_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_EJS9VzXN').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_EJS9VzXN')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_EJS9VzXN\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('EJS9VzXN_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_EJS9VzXN\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_EJS9VzXN\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#4b5d71df .cell execution_count=10}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=11}\n**Question 2. Which of the following types is a concrete type?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#b7e56086 .cell execution_count=11}\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<script>\nvar ID = \"vdz8uJZ1\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='vdz8uJZ1' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_vdz8uJZ1\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_vdz8uJZ1_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_vdz8uJZ1\"\n              id=\"radio_vdz8uJZ1_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        AbstractFloat\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_vdz8uJZ1_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_vdz8uJZ1\"\n              id=\"radio_vdz8uJZ1_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Real\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_vdz8uJZ1_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_vdz8uJZ1\"\n              id=\"radio_vdz8uJZ1_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Number\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_vdz8uJZ1_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_vdz8uJZ1\"\n              id=\"radio_vdz8uJZ1_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Int64\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='vdz8uJZ1_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_vdz8uJZ1').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_vdz8uJZ1')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_vdz8uJZ1\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('vdz8uJZ1_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_vdz8uJZ1\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_vdz8uJZ1\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#be6b667b .cell execution_count=12}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=13}\n**Question 3. What does the `isconcretetype` function return for `AbstractFloat`?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#8a74e9f9 .cell execution_count=13}\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<script>\nvar ID = \"oeB1WuSH\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='oeB1WuSH' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_oeB1WuSH\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_oeB1WuSH_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_oeB1WuSH\"\n              id=\"radio_oeB1WuSH_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        false\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_oeB1WuSH_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_oeB1WuSH\"\n              id=\"radio_oeB1WuSH_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        null\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_oeB1WuSH_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_oeB1WuSH\"\n              id=\"radio_oeB1WuSH_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Error: Undefined type\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_oeB1WuSH_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_oeB1WuSH\"\n              id=\"radio_oeB1WuSH_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        true\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='oeB1WuSH_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_oeB1WuSH').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_oeB1WuSH')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_oeB1WuSH\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('oeB1WuSH_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_oeB1WuSH\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_oeB1WuSH\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#272c21c9 .cell execution_count=14}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=15}\n**Question 4. What will the following code return?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\ntypeof(42)\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#1f789be8 .cell execution_count=15}\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<script>\nvar ID = \"RUlU4SBQ\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='RUlU4SBQ' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_RUlU4SBQ\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_RUlU4SBQ_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_RUlU4SBQ\"\n              id=\"radio_RUlU4SBQ_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Integer\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_RUlU4SBQ_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_RUlU4SBQ\"\n              id=\"radio_RUlU4SBQ_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Number\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_RUlU4SBQ_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_RUlU4SBQ\"\n              id=\"radio_RUlU4SBQ_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Real\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_RUlU4SBQ_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_RUlU4SBQ\"\n              id=\"radio_RUlU4SBQ_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Int64\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='RUlU4SBQ_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_RUlU4SBQ').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_RUlU4SBQ')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_RUlU4SBQ\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('RUlU4SBQ_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_RUlU4SBQ\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_RUlU4SBQ\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#f7ec29da .cell execution_count=16}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=17}\n**Question 5. What is the purpose of the `isa` operator in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#f37dc229 .cell execution_count=17}\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<script>\nvar ID = \"OsboccPa\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='OsboccPa' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_OsboccPa\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_OsboccPa_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_OsboccPa\"\n              id=\"radio_OsboccPa_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        To check if a variable is a subtype of <code>Any</code>.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_OsboccPa_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_OsboccPa\"\n              id=\"radio_OsboccPa_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        To check if a variable&#39;s value matches a specific type.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_OsboccPa_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_OsboccPa\"\n              id=\"radio_OsboccPa_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        To check if a type is concrete.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_OsboccPa_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_OsboccPa\"\n              id=\"radio_OsboccPa_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        To check if a variable is an instance of a specific type or any of its subtypes.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='OsboccPa_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_OsboccPa').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_OsboccPa')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_OsboccPa\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('OsboccPa_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_OsboccPa\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_OsboccPa\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#667b296f .cell execution_count=18}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=19}\n**Question 6. What will be the result of the following code?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nprintln(Int64 <: Real)\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#b3854e57 .cell execution_count=19}\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<script>\nvar ID = \"iUcE2lhG\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='iUcE2lhG' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_iUcE2lhG\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_iUcE2lhG_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_iUcE2lhG\"\n              id=\"radio_iUcE2lhG_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        true for Float64 but not for Int64\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_iUcE2lhG_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_iUcE2lhG\"\n              id=\"radio_iUcE2lhG_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        false\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_iUcE2lhG_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_iUcE2lhG\"\n              id=\"radio_iUcE2lhG_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        true\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_iUcE2lhG_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_iUcE2lhG\"\n              id=\"radio_iUcE2lhG_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Error: Type mismatch\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='iUcE2lhG_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_iUcE2lhG').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_iUcE2lhG')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_iUcE2lhG\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('iUcE2lhG_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_iUcE2lhG\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_iUcE2lhG\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#75df5d32 .cell execution_count=20}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=21}\n**Question 7. In the context of Julia's type system, what is the difference between an abstract type and a concrete type?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#c8286b29 .cell execution_count=21}\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<script>\nvar ID = \"oaXXz8da\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='oaXXz8da' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_oaXXz8da\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_oaXXz8da_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_oaXXz8da\"\n              id=\"radio_oaXXz8da_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Abstract types have fields, while concrete types do not.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_oaXXz8da_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_oaXXz8da\"\n              id=\"radio_oaXXz8da_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Abstract types can be instantiated, whereas concrete types cannot.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_oaXXz8da_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_oaXXz8da\"\n              id=\"radio_oaXXz8da_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Concrete types can be instantiated, whereas abstract types cannot.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_oaXXz8da_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_oaXXz8da\"\n              id=\"radio_oaXXz8da_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Concrete types are slower than abstract types.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='oaXXz8da_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_oaXXz8da').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_oaXXz8da')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_oaXXz8da\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('oaXXz8da_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_oaXXz8da\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_oaXXz8da\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#463ea137 .cell execution_count=22}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=23}\n**Question 8. What does the following code output?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\na = 42\nprintln(a isa Int64)\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#c0ae9479 .cell execution_count=23}\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<script>\nvar ID = \"mlFKLVDV\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='mlFKLVDV' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_mlFKLVDV\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_mlFKLVDV_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_mlFKLVDV\"\n              id=\"radio_mlFKLVDV_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        true\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_mlFKLVDV_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_mlFKLVDV\"\n              id=\"radio_mlFKLVDV_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        false\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_mlFKLVDV_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_mlFKLVDV\"\n              id=\"radio_mlFKLVDV_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        true only for Float64\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_mlFKLVDV_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_mlFKLVDV\"\n              id=\"radio_mlFKLVDV_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Error: Undefined type\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='mlFKLVDV_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_mlFKLVDV').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_mlFKLVDV')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_mlFKLVDV\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('mlFKLVDV_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_mlFKLVDV\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_mlFKLVDV\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#c278ab6e .cell execution_count=24}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=25}\n**Question 9. What does the `<:` operator check in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#a7fcaf75 .cell execution_count=25}\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<script>\nvar ID = \"6HOnW8e7\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='6HOnW8e7' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_6HOnW8e7\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6HOnW8e7_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6HOnW8e7\"\n              id=\"radio_6HOnW8e7_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        If a type is abstract.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6HOnW8e7_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6HOnW8e7\"\n              id=\"radio_6HOnW8e7_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        If one type is a subtype of another.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6HOnW8e7_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6HOnW8e7\"\n              id=\"radio_6HOnW8e7_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        If a type can be instantiated.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_6HOnW8e7_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_6HOnW8e7\"\n              id=\"radio_6HOnW8e7_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        If two types are exactly the same.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='6HOnW8e7_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_6HOnW8e7').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_6HOnW8e7')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_6HOnW8e7\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('6HOnW8e7_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_6HOnW8e7\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_6HOnW8e7\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#861d4677 .cell execution_count=26}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=27}\n**Question 10. Which of the following is a correct use of a type annotation in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nx::Int = 10\ny::Float64 = 3.14\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#ea2590f2 .cell execution_count=27}\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<script>\nvar ID = \"SYbKnD7R\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='SYbKnD7R' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_SYbKnD7R\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_SYbKnD7R_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_SYbKnD7R\"\n              id=\"radio_SYbKnD7R_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Type annotations are not allowed in Julia.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_SYbKnD7R_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_SYbKnD7R\"\n              id=\"radio_SYbKnD7R_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        x and y are type-annotated, meaning they must hold values of type Int and Float64, respectively.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_SYbKnD7R_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_SYbKnD7R\"\n              id=\"radio_SYbKnD7R_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        x can be assigned any value, but y must be of type Float64.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_SYbKnD7R_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_SYbKnD7R\"\n              id=\"radio_SYbKnD7R_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        x and y are type-annotated, meaning they can hold any type of value.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='SYbKnD7R_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_SYbKnD7R').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_SYbKnD7R')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_SYbKnD7R\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('SYbKnD7R_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_SYbKnD7R\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_SYbKnD7R\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::\n\n## Type Annotations and Declarations\n\nIn Julia, you can specify types for variables, function arguments, and return values. Type annotations help to provide clarity in your code, and in some cases, they can enable Julia‚Äôs just-in-time (JIT) compiler to generate more efficient code. While type annotations are optional, they are recommended for improving code readability and performance.\n\n### Variable Type Annotations\n\nYou can explicitly declare the type of a variable by using a type annotation:\n\n::: {#a9628dc7 .cell execution_count=28}\n``` {.julia .cell-code}\nx::Int = 10  # x is an integer\ny::Float64 = 3.14  # y is a Float64\nnothing #| hide_line\n```\n:::\n\n\nIn this example, `x` is explicitly declared as an integer (`Int`), and `y` is declared as a `Float64`. Type annotations can also be used with mutable and immutable structs.\n\n### Function Argument Type Annotations\n\nYou can specify types for function arguments to ensure that the function only accepts values of a specific type:\n\n::: {#5f78c688 .cell execution_count=29}\n``` {.julia .cell-code}\nfunction add(a::Int, b::Int)\n    return a + b\nend\n\nprintln(add(3, 4))  # Valid\nprintln(add(3, \"4\"))  # Error: Argument \"4\" is a String, not an Integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n7\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching add(::Int64, ::String)\nThe function `add` exists, but no method is defined for this combination of argument types.\n\nClosest candidates are:\n  add(::Int64, <span class=\"ansi-bright-red-fg\">::Int64</span>)\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[30]:1</span>\n\n\nStacktrace:\n [1] top-level scope\n   @ In[30]:6</pre>\n```\n:::\n\n:::\n:::\n\n\nIn the above example, `a` and `b` must both be `Int`s. If you try to pass a value of the wrong type (like `\"4\"`), Julia will throw a type error.\n\n### Return Type Annotations\n\nYou can also annotate the return type of a function:\n\n::: {#586fd152 .cell execution_count=30}\n``` {.julia .cell-code}\nfunction multiply(a::Int, b::Int)::Int\n    return a * b\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nmultiply (generic function with 1 method)\n```\n:::\n:::\n\n\nHere, the function `multiply` is declared to return an `Int`, ensuring that the result will always be an integer.\n\n### Type Constraints in Functions\n\nType constraints can be added in function signatures to specify more precisely what types are allowed. This is especially useful for parametric types, as discussed in the next section.\n\n::: {#01fe5d32 .cell execution_count=31}\n``` {.julia .cell-code}\nfunction display_number(x::T) where T <: Real\n    println(\"The number is: \", x)\nend\n\ndisplay_number(3)  # Valid\ndisplay_number(3.5)  # Valid\ndisplay_number(\"Hello\")  # Error: Argument \"Hello\" is not a subtype of Real\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe number is: 3\nThe number is: 3.5\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching display_number(::String)\nThe function `display_number` exists, but no method is defined for this combination of argument types.\n\nClosest candidates are:\n  display_number(<span class=\"ansi-bright-red-fg\">::T</span>) where T&lt;:Real\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[32]:1</span>\n\n\nStacktrace:\n [1] top-level scope\n   @ In[32]:7</pre>\n```\n:::\n\n:::\n:::\n\n\nIn the above function, the argument `x` must be of type `Real` or a subtype of `Real`, which includes `Int`, `Float64`, and others.\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Type Annotations and Declarations in Julia\n\n\n\n::: {#43addb52 .cell execution_count=33}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=34}\n**Question 1. What is the primary purpose of type annotations in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#7c459300 .cell execution_count=34}\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<script>\nvar ID = \"jt1rrSbI\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='jt1rrSbI' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_jt1rrSbI\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_jt1rrSbI_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_jt1rrSbI\"\n              id=\"radio_jt1rrSbI_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        To make code run faster by skipping type checks.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_jt1rrSbI_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_jt1rrSbI\"\n              id=\"radio_jt1rrSbI_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        To specify the exact memory address of a variable.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_jt1rrSbI_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_jt1rrSbI\"\n              id=\"radio_jt1rrSbI_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        To prevent errors from occurring in the code.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_jt1rrSbI_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_jt1rrSbI\"\n              id=\"radio_jt1rrSbI_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        To provide clarity in the code and enable optimizations by the compiler.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='jt1rrSbI_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_jt1rrSbI').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_jt1rrSbI')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_jt1rrSbI\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('jt1rrSbI_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_jt1rrSbI\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_jt1rrSbI\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#26ccd60d .cell execution_count=35}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=36}\n**Question 2. Which of the following correctly applies a type annotation to a variable?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#ce8abb81 .cell execution_count=36}\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<script>\nvar ID = \"0RQJTPEN\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='0RQJTPEN' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_0RQJTPEN\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_0RQJTPEN_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_0RQJTPEN\"\n              id=\"radio_0RQJTPEN_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        a::Int &#61; 10\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_0RQJTPEN_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_0RQJTPEN\"\n              id=\"radio_0RQJTPEN_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        a:Int &#61; 10\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_0RQJTPEN_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_0RQJTPEN\"\n              id=\"radio_0RQJTPEN_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Int::a &#61; 10\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_0RQJTPEN_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_0RQJTPEN\"\n              id=\"radio_0RQJTPEN_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        a &#61; 10::Int\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='0RQJTPEN_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_0RQJTPEN').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_0RQJTPEN')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_0RQJTPEN\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('0RQJTPEN_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_0RQJTPEN\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_0RQJTPEN\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#f311b27a .cell execution_count=37}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=38}\n**Question 3. What will happen if the following code is executed?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction add(a::Int, b::Int)\n    return a + b\nend\n\nadd(3, \"4\")\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#bea512df .cell execution_count=38}\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<script>\nvar ID = \"583B5wBm\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='583B5wBm' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_583B5wBm\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_583B5wBm_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_583B5wBm\"\n              id=\"radio_583B5wBm_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will throw a syntax error.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_583B5wBm_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_583B5wBm\"\n              id=\"radio_583B5wBm_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will ignore the type annotation and return 7.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_583B5wBm_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_583B5wBm\"\n              id=\"radio_583B5wBm_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will convert &quot;4&quot; to an Int and return 7.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_583B5wBm_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_583B5wBm\"\n              id=\"radio_583B5wBm_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will throw a type error because <code>&quot;4&quot;</code> is a String, not an Int.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='583B5wBm_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_583B5wBm').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_583B5wBm')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_583B5wBm\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('583B5wBm_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_583B5wBm\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_583B5wBm\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#d80b326e .cell execution_count=39}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=40}\n**Question 4. In Julia, what will the following code output?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction multiply(a::Int, b::Int)::Int\n    return a * b\nend\nprintln(multiply(3, 4))\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#cd53987b .cell execution_count=40}\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<script>\nvar ID = \"rAV5BmT9\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='rAV5BmT9' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_rAV5BmT9\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_rAV5BmT9_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_rAV5BmT9\"\n              id=\"radio_rAV5BmT9_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        12\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_rAV5BmT9_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_rAV5BmT9\"\n              id=\"radio_rAV5BmT9_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Nothing\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_rAV5BmT9_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_rAV5BmT9\"\n              id=\"radio_rAV5BmT9_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        12.0\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_rAV5BmT9_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_rAV5BmT9\"\n              id=\"radio_rAV5BmT9_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Error: Incorrect type\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='rAV5BmT9_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_rAV5BmT9').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_rAV5BmT9')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_rAV5BmT9\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('rAV5BmT9_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_rAV5BmT9\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_rAV5BmT9\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#65da056c .cell execution_count=41}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=42}\n**Question 5. What will happen when the following code is executed?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction display_number(x::T) where T <: Real\n    println(\"The number is: \", x)\nend\n\ndisplay_number(\"Hello\")\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#8f26b8ee .cell execution_count=42}\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<script>\nvar ID = \"WYey1VKV\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='WYey1VKV' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_WYey1VKV\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_WYey1VKV_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_WYey1VKV\"\n              id=\"radio_WYey1VKV_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will output: &#39;The number is: Hello&#39;\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_WYey1VKV_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_WYey1VKV\"\n              id=\"radio_WYey1VKV_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will throw a type error because <code>&quot;Hello&quot;</code> is not a subtype of <code>Real</code>.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_WYey1VKV_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_WYey1VKV\"\n              id=\"radio_WYey1VKV_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will print nothing.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_WYey1VKV_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_WYey1VKV\"\n              id=\"radio_WYey1VKV_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will convert &#39;Hello&#39; to a Real type.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='WYey1VKV_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_WYey1VKV').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_WYey1VKV')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_WYey1VKV\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('WYey1VKV_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_WYey1VKV\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_WYey1VKV\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::\n\n## Parametric Types and Functions\n\nParametric types in Julia allow you to create types that can work with multiple data types, providing flexibility and enabling generic programming. This is particularly useful when you want to create functions, structs, or methods that can handle various types without needing to duplicate code.\n\n### Parametric Composite Types\n\nA parametric struct can take one or more type parameters:\n\n::: {#7f8f6463 .cell execution_count=43}\n``` {.julia .cell-code}\nstruct Pair{T, S}\n    first::T\n    second::S\nend\n\npair1 = Pair(1, \"apple\")  # Pair of Int and String\npair2 = Pair(3.14, true)  # Pair of Float64 and Bool\n\n@show pair1\n@show pair2\nnothing #| hide_line\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npair1 = Pair{Int64, String}(1, \"apple\")\npair2 = Pair{Float64, Bool}(3.14, true)\n```\n:::\n:::\n\n\nIn this case, `Pair` can be instantiated with any two types `T` and `S`, making it more versatile.\n\n### Parametric Abstract Types\n\nIn Julia, parametric abstract types allow you to define an abstract type that is parameterized by another type. This enables the creation of more flexible and reusable abstractions, where the type's behavior can be customized based on the type of its parameter.\n\nParametric abstract types are used to create a family of types that can represent a wide range of concrete types, without specifying exactly which type is being used. The parameter can be a single type or even a tuple of types.\n\n#### Syntax:\n\n::: {#a2a59ad9 .cell execution_count=44}\n``` {.julia .cell-code}\nabstract type AbstractContainer{T} end\n```\n:::\n\n\nHere, `AbstractContainer` is an abstract type that takes a type parameter `T`. Any concrete type that is a subtype of `AbstractContainer` can specify the concrete type for `T`.\n\n#### Example:\n\n::: {#754a6438 .cell execution_count=45}\n``` {.julia .cell-code}\nabstract type AbstractContainer{T} end\n\nstruct VectorContainer{T} <: AbstractContainer{T}\n    data::Vector{T}\nend\n\nstruct SetContainer{T} <: AbstractContainer{T}\n    data::Set{T}\nend\n\nfunction print_container_info(container::AbstractContainer{T}) where T\n    println(\"Container holds values of type: \", T)\nend\n\n# Usage:\nvec = VectorContainer([1, 2, 3])\nset = SetContainer(Set([1, 2, 3]))\n\nprint_container_info(vec)\nprint_container_info(set)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nContainer holds values of type: Int64\nContainer holds values of type: Int64\n```\n:::\n:::\n\n\n#### Explanation:\n\n- `AbstractContainer{T}` is a parametric abstract type, where `T` represents the type of elements contained within the container.\n- `VectorContainer` and `SetContainer` are concrete subtypes of `AbstractContainer`, each using a different data structure (`Vector` and `Set`) to store elements of type `T`.\n- The function `print_container_info` accepts any container that is a subtype of `AbstractContainer` and prints the type of elements inside the container.\n\n#### Benefits:\n\n- **Flexibility:** You can create containers (or other structures) that work with a wide range of types without needing to explicitly define separate types for each use case.\n- **Code Reusability:** By using parametric types, you avoid duplicating code for different types of containers or structures, making your codebase more maintainable.\n- **Static Type Checking:** Julia's type system ensures that the correct type is used at compile-time, providing both flexibility and safety.\n\nParametric abstract types are useful for designing generic libraries, where behavior can be customized according to the types being used.\n\n### Parametric Functions\n\nYou can also define parametric functions that can work with different types:\n\n::: {#1d2e67bf .cell execution_count=46}\n``` {.julia .cell-code}\nfunction identity(x::T) where T\n    return x\nend\n\nprintln(identity(5))  # Integer\nprintln(identity(3.14))  # Float64\nprintln(identity(\"Hello\"))  # String\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n3.14\nHello\n```\n:::\n:::\n\n\nThe function `identity` works for any type `T`, and you can pass an `Int`, `Float64`, `String`, or any other type.\n\n### Constraints on Parametric Functions\n\nYou can add constraints to parametric functions, ensuring that the parametric type parameter must be a subtype of a specific type. For example, you might want a function to only accept numerical types:\n\n::: {#9f3624db .cell execution_count=47}\n``` {.julia .cell-code}\nfunction add_one(x::T) where T <: Number\n    return x + 1\nend\n\nprintln(add_one(3))  # Valid: 3 + 1 = 4\nprintln(add_one(3.14))  # Valid: 3.14 + 1 = 4.14\nprintln(add_one(\"Hello\"))  # Error: String is not a subtype of Number\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n4.140000000000001\n```\n:::\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>MethodError: no method matching add_one(::String)\nThe function `add_one` exists, but no method is defined for this combination of argument types.\n\nClosest candidates are:\n  add_one(<span class=\"ansi-bright-red-fg\">::T</span>) where T&lt;:Number\n<span class=\"ansi-bright-black-fg\">   @</span> <span class=\"ansi-magenta-fg\">Main</span> <span style=\"text-decoration:underline\" class=\"ansi-bright-black-fg\">In[48]:1</span>\n\n\nStacktrace:\n [1] top-level scope\n   @ In[48]:7</pre>\n```\n:::\n\n:::\n:::\n\n\nIn the above example, `T` is constrained to be a subtype of `Number`, so only numbers can be passed to the `add_one` function.\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Parametric Types and Functions in Julia\n\n\n\n::: {#1fe453c1 .cell execution_count=49}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=50}\n**Question 1. What is a parametric type in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#77796e41 .cell execution_count=50}\n\n::: {.cell-output .cell-output-display execution_count=51}\n```{=html}\n<script>\nvar ID = \"cIt5sNyu\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='cIt5sNyu' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_cIt5sNyu\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_cIt5sNyu_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_cIt5sNyu\"\n              id=\"radio_cIt5sNyu_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        A special type used to store generic data.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_cIt5sNyu_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_cIt5sNyu\"\n              id=\"radio_cIt5sNyu_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        A type that is parameterized by another type, allowing flexibility.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_cIt5sNyu_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_cIt5sNyu\"\n              id=\"radio_cIt5sNyu_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        A type that only works with a single data type.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_cIt5sNyu_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_cIt5sNyu\"\n              id=\"radio_cIt5sNyu_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        A type that can be instantiated with any number of arguments.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='cIt5sNyu_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_cIt5sNyu').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_cIt5sNyu')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_cIt5sNyu\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('cIt5sNyu_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_cIt5sNyu\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_cIt5sNyu\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#e8a40a40 .cell execution_count=51}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=52}\n**Question 2. What does the following code define?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nstruct Pair{T, S}\n    first::T\n    second::S\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#da05b724 .cell execution_count=52}\n\n::: {.cell-output .cell-output-display execution_count=53}\n```{=html}\n<script>\nvar ID = \"2AdlN2cF\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='2AdlN2cF' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_2AdlN2cF\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2AdlN2cF_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2AdlN2cF\"\n              id=\"radio_2AdlN2cF_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        A union of two types, T and S.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2AdlN2cF_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2AdlN2cF\"\n              id=\"radio_2AdlN2cF_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        A parametric type that enforces a specific type for each field.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2AdlN2cF_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2AdlN2cF\"\n              id=\"radio_2AdlN2cF_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        A struct that pairs two values, where the types can vary.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_2AdlN2cF_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_2AdlN2cF\"\n              id=\"radio_2AdlN2cF_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        A function that accepts two parameters of any type.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='2AdlN2cF_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_2AdlN2cF').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_2AdlN2cF')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_2AdlN2cF\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('2AdlN2cF_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_2AdlN2cF\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_2AdlN2cF\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#e044628a .cell execution_count=53}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=54}\n**Question 3. What is the output of the following code?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nabstract type AbstractContainer{T} end\n\nstruct VectorContainer{T} <: AbstractContainer{T}\n    data::Vector{T}\nend\n\nvec = VectorContainer([1, 2, 3])\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#39383b5a .cell execution_count=54}\n\n::: {.cell-output .cell-output-display execution_count=55}\n```{=html}\n<script>\nvar ID = \"sHrWJUDx\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='sHrWJUDx' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_sHrWJUDx\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_sHrWJUDx_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_sHrWJUDx\"\n              id=\"radio_sHrWJUDx_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        A parametric type defining a container for vectors of a specific type.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_sHrWJUDx_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_sHrWJUDx\"\n              id=\"radio_sHrWJUDx_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        A type that can only contain integers.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_sHrWJUDx_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_sHrWJUDx\"\n              id=\"radio_sHrWJUDx_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        A concrete container type for storing vectors of any type.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_sHrWJUDx_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_sHrWJUDx\"\n              id=\"radio_sHrWJUDx_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        A generic type for any container.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='sHrWJUDx_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_sHrWJUDx').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_sHrWJUDx')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_sHrWJUDx\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('sHrWJUDx_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_sHrWJUDx\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_sHrWJUDx\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#e9686c49 .cell execution_count=55}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=56}\n**Question 4. What is the advantage of using parametric abstract types in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#fb1ab881 .cell execution_count=56}\n\n::: {.cell-output .cell-output-display execution_count=57}\n```{=html}\n<script>\nvar ID = \"YaRl2xoS\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='YaRl2xoS' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_YaRl2xoS\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_YaRl2xoS_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_YaRl2xoS\"\n              id=\"radio_YaRl2xoS_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        They make the code harder to read but more flexible.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_YaRl2xoS_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_YaRl2xoS\"\n              id=\"radio_YaRl2xoS_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        They are used to limit the types that can be instantiated.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_YaRl2xoS_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_YaRl2xoS\"\n              id=\"radio_YaRl2xoS_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        They provide the flexibility to create reusable abstractions with customizable types.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_YaRl2xoS_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_YaRl2xoS\"\n              id=\"radio_YaRl2xoS_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        They allow type constraints to be added to functions.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='YaRl2xoS_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_YaRl2xoS').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_YaRl2xoS')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_YaRl2xoS\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('YaRl2xoS_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_YaRl2xoS\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_YaRl2xoS\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#3f7344b3 .cell execution_count=57}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=58}\n**Question 5. What does the following function do?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction add_one(x::T) where T <: Number\n    return x + 1\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#93380e10 .cell execution_count=58}\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<script>\nvar ID = \"jehGppPK\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='jehGppPK' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_jehGppPK\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_jehGppPK_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_jehGppPK\"\n              id=\"radio_jehGppPK_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It adds one to a string and returns the result.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_jehGppPK_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_jehGppPK\"\n              id=\"radio_jehGppPK_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It adds one to any type.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_jehGppPK_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_jehGppPK\"\n              id=\"radio_jehGppPK_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It adds one to a number, but throws an error for non-numbers.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_jehGppPK_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_jehGppPK\"\n              id=\"radio_jehGppPK_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It adds one to any type, even strings.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='jehGppPK_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_jehGppPK').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_jehGppPK')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_jehGppPK\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('jehGppPK_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_jehGppPK\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_jehGppPK\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::\n\n## Type Stability in Julia\n\nIn Julia, **type stability** is a key concept for writing efficient code. Type stability means that the type of a variable or expression can be determined at compile time, enabling the Julia compiler to optimize the code. When working with advanced types, such as parametric abstract types, it's important to ensure that your code remains type stable, as this allows Julia's Just-In-Time (JIT) compiler to generate more efficient machine code.\n\n### Why is Type Stability Important?\n\nType instability can cause the JIT compiler to generate multiple versions of a function or method, which can degrade performance. Type stability, on the other hand, helps Julia avoid unnecessary runtime checks and ensures that the type of every variable is known before runtime.\n\nFor instance, if you define a function where the type of its output cannot be predicted based on the input types, Julia may have to fall back to a slower, more generic approach.\n\n### Example of Type Instability and Stability\n\nLet‚Äôs consider an example using parametric types:\n\n::: {#54141ecb .cell execution_count=59}\n``` {.julia .cell-code}\nfunction sum_elements(arr::Vector{T}) where T\n    s = 0\n    for x in arr\n        s += x  # Type instability: T is not known to be a number\n    end\n    return s\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\nsum_elements (generic function with 1 method)\n```\n:::\n:::\n\n\nIn this case, the function `sum_elements` is type unstable because Julia cannot guarantee that `T` will always be a numeric type. This can lead to inefficiencies.\n\nNow, let's fix this by enforcing type stability:\n\n::: {#8d3721d3 .cell execution_count=60}\n``` {.julia .cell-code}\nfunction sum_elements(arr::Vector{T}) where T <: Number\n    s = zero(T)  # Start with the appropriate type for T\n    for x in arr\n        s += x\n    end\n    return s\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\nsum_elements (generic function with 2 methods)\n```\n:::\n:::\n\n\nIn this version, we restrict the type of `T` to be a subtype of `Number`, ensuring that the type of `s` is always numeric and enabling better performance through type stability.\n\n### Key Points for Ensuring Type Stability\n- Use **specific type annotations** whenever possible, especially with parametric types.\n- Avoid mixing types that could lead to ambiguities in the function‚Äôs return type.\n- Always initialize variables with types that are known, such as using `zero(T)` for numeric types.\n- When dealing with generic code, try to define methods that narrow the possible types of variables (e.g., `T <: Number`).\n\nEnsuring type stability not only helps with performance but also aids in catching potential type errors early during development.\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Type Stability in Julia\n\n\n\n::: {#23ddd1c2 .cell execution_count=62}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=63}\n**Question 1. Why is type stability important in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#82a9ca68 .cell execution_count=63}\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<script>\nvar ID = \"7y0pP92b\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='7y0pP92b' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_7y0pP92b\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7y0pP92b_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7y0pP92b\"\n              id=\"radio_7y0pP92b_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It allows the Julia compiler to optimize code and avoid unnecessary runtime checks.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7y0pP92b_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7y0pP92b\"\n              id=\"radio_7y0pP92b_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It prevents type errors from occurring in the code.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7y0pP92b_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7y0pP92b\"\n              id=\"radio_7y0pP92b_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It forces the use of static typing in all functions.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_7y0pP92b_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_7y0pP92b\"\n              id=\"radio_7y0pP92b_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It makes code easier to write and debug.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='7y0pP92b_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_7y0pP92b').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_7y0pP92b')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_7y0pP92b\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('7y0pP92b_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_7y0pP92b\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_7y0pP92b\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#f5a37c22 .cell execution_count=64}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=65}\n**Question 2. What is the issue with the following function in terms of type stability?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction sum_elements(arr::Vector{T}) where T\n    s = 0\n    for x in arr\n        s += x  # Type instability: T is not known to be a number\n    end\n    return s\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#0afaa0c1 .cell execution_count=65}\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<script>\nvar ID = \"VBKA89Kd\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='VBKA89Kd' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_VBKA89Kd\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_VBKA89Kd_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_VBKA89Kd\"\n              id=\"radio_VBKA89Kd_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The variable <code>s</code> is not initialized properly.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_VBKA89Kd_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_VBKA89Kd\"\n              id=\"radio_VBKA89Kd_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The function does not return anything.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_VBKA89Kd_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_VBKA89Kd\"\n              id=\"radio_VBKA89Kd_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        The loop does not iterate over the array correctly.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_VBKA89Kd_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_VBKA89Kd\"\n              id=\"radio_VBKA89Kd_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        The type of <code>T</code> is not restricted to numeric types, leading to type instability.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='VBKA89Kd_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_VBKA89Kd').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_VBKA89Kd')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_VBKA89Kd\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('VBKA89Kd_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_VBKA89Kd\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_VBKA89Kd\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#bc81c5a4 .cell execution_count=66}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=67}\n**Question 3. How is type stability ensured in the following corrected version of the code?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction sum_elements(arr::Vector{T}) where T <: Number\n    s = zero(T)  # Start with the appropriate type for T\n    for x in arr\n        s += x\n    end\n    return s\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#bf5decf7 .cell execution_count=67}\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<script>\nvar ID = \"Vzru5lVS\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='Vzru5lVS' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_Vzru5lVS\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Vzru5lVS_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Vzru5lVS\"\n              id=\"radio_Vzru5lVS_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        By defining a default return type for the function.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Vzru5lVS_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Vzru5lVS\"\n              id=\"radio_Vzru5lVS_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        By initializing <code>s</code> with a numeric zero value &#40;<code>zero&#40;T&#41;</code>&#41; and restricting <code>T</code> to <code>Number</code>.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Vzru5lVS_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Vzru5lVS\"\n              id=\"radio_Vzru5lVS_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        By using an abstract type for the argument <code>arr</code>.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Vzru5lVS_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Vzru5lVS\"\n              id=\"radio_Vzru5lVS_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        By ensuring that <code>arr</code> is always of type <code>Vector&#123;Int&#125;</code>.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='Vzru5lVS_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_Vzru5lVS').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_Vzru5lVS')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_Vzru5lVS\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('Vzru5lVS_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_Vzru5lVS\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_Vzru5lVS\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#b1ac09f4 .cell execution_count=68}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=69}\n**Question 4. What does type instability typically cause in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#5f1b4f69 .cell execution_count=69}\n\n::: {.cell-output .cell-output-display execution_count=70}\n```{=html}\n<script>\nvar ID = \"hHYPVNOV\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='hHYPVNOV' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_hHYPVNOV\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_hHYPVNOV_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_hHYPVNOV\"\n              id=\"radio_hHYPVNOV_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It allows Julia to use static typing for optimization.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_hHYPVNOV_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_hHYPVNOV\"\n              id=\"radio_hHYPVNOV_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It can cause the JIT compiler to generate multiple versions of a function, degrading performance.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_hHYPVNOV_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_hHYPVNOV\"\n              id=\"radio_hHYPVNOV_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It improves code readability and makes debugging easier.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_hHYPVNOV_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_hHYPVNOV\"\n              id=\"radio_hHYPVNOV_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It can lead to more efficient code execution.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='hHYPVNOV_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_hHYPVNOV').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_hHYPVNOV')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_hHYPVNOV\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('hHYPVNOV_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_hHYPVNOV\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_hHYPVNOV\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#6db83b9c .cell execution_count=70}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=71}\n**Question 5. Which of the following is a recommended strategy for ensuring type stability in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#9dea9ee2 .cell execution_count=71}\n\n::: {.cell-output .cell-output-display execution_count=72}\n```{=html}\n<script>\nvar ID = \"zYnj0TLb\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='zYnj0TLb' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_zYnj0TLb\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_zYnj0TLb_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_zYnj0TLb\"\n              id=\"radio_zYnj0TLb_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Always avoid parametric types in functions.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_zYnj0TLb_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_zYnj0TLb\"\n              id=\"radio_zYnj0TLb_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        Use generic types in functions to handle various types without constraints.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_zYnj0TLb_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_zYnj0TLb\"\n              id=\"radio_zYnj0TLb_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Avoid using any type annotations for function arguments.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_zYnj0TLb_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_zYnj0TLb\"\n              id=\"radio_zYnj0TLb_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Use specific type annotations and initialize variables with known types.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='zYnj0TLb_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_zYnj0TLb').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_zYnj0TLb')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_zYnj0TLb\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('zYnj0TLb_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_zYnj0TLb\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_zYnj0TLb\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::\n\n## Type Conversion and Promotion\n\nIn Julia, type conversion and promotion are mechanisms that allow for flexibility when working with different types, enabling smooth interactions and arithmetic between varying data types. Conversion changes the type of a value, while promotion ensures two values have a common type for an operation.\n\n### Type Conversion\n\nType conversion in Julia is typically achieved with the `convert` function, which tries to change a value from one type to another. For conversions between `Float64` and `Int`, methods like `round` and `floor` are commonly used to handle fractional parts safely. To convert numbers to strings, use the `string()` function instead.\n\n::: {#fd97449f .cell execution_count=72}\n``` {.julia .cell-code}\nprintln(round(Int, 3.14))   # Rounds 3.14 to the nearest integer, output: 3\nprintln(floor(Int, 3.14))   # Floors 3.14 to the nearest integer, output: 3\nprintln(convert(Float64, 5))  # Converts Int to Float64, output: 5.0\nprintln(string(123))         # Converts Int to String, output: \"123\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3\n3\n5.0\n123\n```\n:::\n:::\n\n\nIn these examples:\n\n- `round` rounds a `Float64` to the nearest `Int`.\n- `floor` converts a `Float64` to the nearest lower `Int`.\n- Converting an `Int` to `Float64` represents the integer as a floating-point number.\n- `string()` converts an integer to its string representation.\n\n### Automatic Conversion\n\nIn many cases, Julia will automatically convert types when it is unambiguous. For instance, you can directly assign an integer to a floating-point variable, and Julia will automatically convert it.\n\n::: {#7ad12f34 .cell execution_count=73}\n``` {.julia .cell-code}\ny::Float64 = 10  # The integer 10 is automatically converted to 10.0 (Float64)\nprintln(y)       # Output: 10.0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10.0\n```\n:::\n:::\n\n\n### Type Promotion\n\nType promotion is used when combining two values of different types in an operation. Julia promotes values to a common type using the `promote` function, which returns values in their promoted type. This is useful when performing arithmetic on values of different types.\n\n::: {#cd508a23 .cell execution_count=74}\n``` {.julia .cell-code}\na, b = promote(3, 4.5)  # Promotes both values to Float64\nprintln(a)              # Output: 3.0\nprintln(b)              # Output: 4.5\nprintln(typeof(a))      # Output: Float64\nprintln(typeof(b))      # Output: Float64\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.0\n4.5\nFloat64\nFloat64\n```\n:::\n:::\n\n\nIn this example, `promote` converts both `3` (an `Int`) and `4.5` (a `Float64`) to `Float64` so they can be added, subtracted, or multiplied without any type conflicts.\n\n### Summary\n\n- `convert(Type, value)`: Converts `value` to the specified `Type`, if possible.\n- `promote(x, y)`: Returns both `x` and `y` promoted to a common type.\n- Type promotion rules allow Julia to handle operations between different types smoothly, making the language both powerful and flexible for numerical and data processing tasks.\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Type Conversion and Promotion in Julia\n\n\n\n::: {#82463abe .cell execution_count=76}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=77}\n**Question 1. What does the `convert` function do in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#313df58e .cell execution_count=77}\n\n::: {.cell-output .cell-output-display execution_count=78}\n```{=html}\n<script>\nvar ID = \"xcHOdVNY\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='xcHOdVNY' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_xcHOdVNY\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_xcHOdVNY_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_xcHOdVNY\"\n              id=\"radio_xcHOdVNY_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It converts a value from one type to another, if possible.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_xcHOdVNY_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_xcHOdVNY\"\n              id=\"radio_xcHOdVNY_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It automatically promotes values to a common type.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_xcHOdVNY_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_xcHOdVNY\"\n              id=\"radio_xcHOdVNY_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It changes a value to a boolean type.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_xcHOdVNY_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_xcHOdVNY\"\n              id=\"radio_xcHOdVNY_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It converts numbers to strings.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='xcHOdVNY_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_xcHOdVNY').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_xcHOdVNY')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_xcHOdVNY\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('xcHOdVNY_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_xcHOdVNY\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_xcHOdVNY\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#0525dc4d .cell execution_count=78}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=79}\n**Question 2. What is the output of the following code?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nprintln(round(Int, 3.14))   # Rounds 3.14 to the nearest integer, output: 3\nprintln(floor(Int, 3.14))   # Floors 3.14 to the nearest integer, output: 3\nprintln(convert(Float64, 5))  # Converts Int to Float64, output: 5.0\nprintln(string(123))         # Converts Int to String, output: \"123\"\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#668784b1 .cell execution_count=79}\n\n::: {.cell-output .cell-output-display execution_count=80}\n```{=html}\n<script>\nvar ID = \"V7Qtxb2S\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='V7Qtxb2S' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_V7Qtxb2S\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_V7Qtxb2S_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_V7Qtxb2S\"\n              id=\"radio_V7Qtxb2S_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        3, 3, 5.0, 123\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_V7Qtxb2S_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_V7Qtxb2S\"\n              id=\"radio_V7Qtxb2S_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        5.0, 3, 5, &#39;123&#39;\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_V7Qtxb2S_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_V7Qtxb2S\"\n              id=\"radio_V7Qtxb2S_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        3, 3.14, 5, &#39;123&#39;\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_V7Qtxb2S_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_V7Qtxb2S\"\n              id=\"radio_V7Qtxb2S_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        3, 3, 5.0, &#39;123&#39;\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='V7Qtxb2S_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_V7Qtxb2S').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_V7Qtxb2S')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_V7Qtxb2S\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('V7Qtxb2S_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_V7Qtxb2S\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_V7Qtxb2S\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#383127a9 .cell execution_count=80}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=81}\n**Question 3. What happens when an integer is assigned to a `Float64` variable in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\ny::Float64 = 10  # The integer 10 is automatically converted to 10.0 (Float64)\nprintln(y)       # Output: 10.0\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#6c6703dc .cell execution_count=81}\n\n::: {.cell-output .cell-output-display execution_count=82}\n```{=html}\n<script>\nvar ID = \"Xoc6trBs\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='Xoc6trBs' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_Xoc6trBs\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Xoc6trBs_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Xoc6trBs\"\n              id=\"radio_Xoc6trBs_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Julia throws a type error because of the type mismatch.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Xoc6trBs_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Xoc6trBs\"\n              id=\"radio_Xoc6trBs_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The conversion needs to be done explicitly using <code>convert</code>.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Xoc6trBs_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Xoc6trBs\"\n              id=\"radio_Xoc6trBs_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        The variable <code>y</code> will be set to the integer value of 10.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Xoc6trBs_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Xoc6trBs\"\n              id=\"radio_Xoc6trBs_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        Julia automatically converts the integer to a Float64.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='Xoc6trBs_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_Xoc6trBs').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_Xoc6trBs')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_Xoc6trBs\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('Xoc6trBs_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_Xoc6trBs\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_Xoc6trBs\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#88c8f244 .cell execution_count=82}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=83}\n**Question 4. What does the `promote` function do in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\na, b = promote(3, 4.5)  # Promotes both values to Float64\nprintln(a)              # Output: 3.0\nprintln(b)              # Output: 4.5\nprintln(typeof(a))      # Output: Float64\nprintln(typeof(b))      # Output: Float64\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#87bf23ad .cell execution_count=83}\n\n::: {.cell-output .cell-output-display execution_count=84}\n```{=html}\n<script>\nvar ID = \"WW0D3rkN\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='WW0D3rkN' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_WW0D3rkN\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_WW0D3rkN_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_WW0D3rkN\"\n              id=\"radio_WW0D3rkN_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It converts values to strings for display.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_WW0D3rkN_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_WW0D3rkN\"\n              id=\"radio_WW0D3rkN_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It converts both values to integers.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_WW0D3rkN_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_WW0D3rkN\"\n              id=\"radio_WW0D3rkN_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It promotes two values to a common type for an operation.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_WW0D3rkN_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_WW0D3rkN\"\n              id=\"radio_WW0D3rkN_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It checks if two values have the same type.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='WW0D3rkN_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_WW0D3rkN').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_WW0D3rkN')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_WW0D3rkN\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('WW0D3rkN_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_WW0D3rkN\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_WW0D3rkN\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#1ca38533 .cell execution_count=84}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=85}\n**Question 5. What will happen if we try to add an `Int` and a `String` in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nprintln(3 + \"Hello\")  # Attempting to add Int and String\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#4648eabc .cell execution_count=85}\n\n::: {.cell-output .cell-output-display execution_count=86}\n```{=html}\n<script>\nvar ID = \"h1X9oubL\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='h1X9oubL' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_h1X9oubL\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_h1X9oubL_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_h1X9oubL\"\n              id=\"radio_h1X9oubL_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will promote the number to a string.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_h1X9oubL_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_h1X9oubL\"\n              id=\"radio_h1X9oubL_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will throw a type error.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_h1X9oubL_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_h1X9oubL\"\n              id=\"radio_h1X9oubL_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        Julia will automatically convert both to a common type.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_h1X9oubL_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_h1X9oubL\"\n              id=\"radio_h1X9oubL_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will concatenate the string and the number.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='h1X9oubL_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_h1X9oubL').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_h1X9oubL')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_h1X9oubL\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('h1X9oubL_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_h1X9oubL\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_h1X9oubL\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::\n\n\n## Union Types\n\nIn Julia, `Union` types are used to create variables or function arguments that can accept multiple types. This is particularly useful when you want to allow a function to work with multiple types without needing to write separate methods for each one.\n\n### Using `Union` Types\n\nA `Union` type is created by specifying a list of types within `Union{}`. This allows a variable to hold values of any type listed in the union.\n\n::: {#af48900e .cell execution_count=86}\n``` {.julia .cell-code}\n# Example of a Union type allowing both Int and Float64\nfunction process_number(x::Union{Int, Float64})\n    println(\"The input is: \", x)\nend\n\nprocess_number(5)       # Works with an Int\nprocess_number(3.14)    # Works with a Float64\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe input is: 5\nThe input is: 3.14\n```\n:::\n:::\n\n\nIn this example, `process_number` can accept both `Int` and `Float64` types, making it versatile across multiple input types.\n\n### Practical Use Cases for `Union`\n\nUnions are useful when you want a function or variable to be flexible about the types it accepts. For example, you may want to accept either an integer or a floating-point number in a calculation function. You can also use `Union` in type annotations to define fields in structs or arguments in functions that accept multiple types.\n\n::: {#2b2cd1f3 .cell execution_count=87}\n``` {.julia .cell-code}\n# Example using Union to handle multiple types in a function\nfunction add_one(x::Union{Int, Float64})\n    return x + 1\nend\n\nprintln(add_one(3))     # Output: 4 (Int)\nprintln(add_one(2.5))   # Output: 3.5 (Float64)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n3.5\n```\n:::\n:::\n\n\nIn this example, `add_one` accepts both `Int` and `Float64`, enabling it to work flexibly with different numerical types.\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Union Types in Julia\n\n\n\n::: {#e0a9ec57 .cell execution_count=89}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=90}\n**Question 1. What is a `Union` type in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#ac78e86e .cell execution_count=90}\n\n::: {.cell-output .cell-output-display execution_count=91}\n```{=html}\n<script>\nvar ID = \"dy57ZOyJ\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='dy57ZOyJ' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_dy57ZOyJ\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_dy57ZOyJ_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_dy57ZOyJ\"\n              id=\"radio_dy57ZOyJ_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        A built-in function for type conversion.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_dy57ZOyJ_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_dy57ZOyJ\"\n              id=\"radio_dy57ZOyJ_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        A type that allows a variable to accept multiple types.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_dy57ZOyJ_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_dy57ZOyJ\"\n              id=\"radio_dy57ZOyJ_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        A type that restricts a variable to only one type.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_dy57ZOyJ_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_dy57ZOyJ\"\n              id=\"radio_dy57ZOyJ_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        A type that can only accept floating-point numbers.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='dy57ZOyJ_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_dy57ZOyJ').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_dy57ZOyJ')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_dy57ZOyJ\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('dy57ZOyJ_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_dy57ZOyJ\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_dy57ZOyJ\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#f9f26036 .cell execution_count=91}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=92}\n**Question 2. What is the output of the following code?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction process_number(x::Union{Int, Float64})\n    println(\"The input is: \", x)\nend\n\nprocess_number(5)       # Works with an Int\nprocess_number(3.14)    # Works with a Float64\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#b0a3f0c0 .cell execution_count=92}\n\n::: {.cell-output .cell-output-display execution_count=93}\n```{=html}\n<script>\nvar ID = \"bk1AbudH\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='bk1AbudH' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_bk1AbudH\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_bk1AbudH_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_bk1AbudH\"\n              id=\"radio_bk1AbudH_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The input is: 5, The input is: 3\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_bk1AbudH_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_bk1AbudH\"\n              id=\"radio_bk1AbudH_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The input is: 3.14, The input is: 5\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_bk1AbudH_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_bk1AbudH\"\n              id=\"radio_bk1AbudH_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        The input is: 5, The input is: 3.0\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_bk1AbudH_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_bk1AbudH\"\n              id=\"radio_bk1AbudH_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        The input is: 5, The input is: 3.14\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='bk1AbudH_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_bk1AbudH').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_bk1AbudH')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_bk1AbudH\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('bk1AbudH_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_bk1AbudH\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_bk1AbudH\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#1060bab7 .cell execution_count=93}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=94}\n**Question 3. Which of the following scenarios would benefit from using a `Union` type?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\n# Example using Union to handle multiple types in a function\nfunction add_one(x::Union{Int, Float64})\n    return x + 1\nend\n\nprintln(add_one(3))     # Output: 4 (Int)\nprintln(add_one(2.5))   # Output: 3.5 (Float64)\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#508eb80d .cell execution_count=94}\n\n::: {.cell-output .cell-output-display execution_count=95}\n```{=html}\n<script>\nvar ID = \"xr9oZU0O\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='xr9oZU0O' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_xr9oZU0O\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_xr9oZU0O_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_xr9oZU0O\"\n              id=\"radio_xr9oZU0O_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        When a function accepts only integers.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_xr9oZU0O_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_xr9oZU0O\"\n              id=\"radio_xr9oZU0O_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        When a function needs to accept both integers and floating-point numbers.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_xr9oZU0O_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_xr9oZU0O\"\n              id=\"radio_xr9oZU0O_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        When a function is only designed to accept floating-point numbers.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_xr9oZU0O_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_xr9oZU0O\"\n              id=\"radio_xr9oZU0O_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        When there is a strict requirement to accept a specific type.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='xr9oZU0O_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_xr9oZU0O').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_xr9oZU0O')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_xr9oZU0O\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('xr9oZU0O_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_xr9oZU0O\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_xr9oZU0O\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#6aa998f6 .cell execution_count=95}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=96}\n**Question 4. What happens when a value of a type not listed in the `Union` is passed to a function?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction process_number(x::Union{Int, Float64})\n    println(\"The input is: \", x)\nend\n\nprocess_number(\"Hello\")  # Trying to pass a String\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#8ce26df1 .cell execution_count=96}\n\n::: {.cell-output .cell-output-display execution_count=97}\n```{=html}\n<script>\nvar ID = \"Txhdhf8v\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='Txhdhf8v' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_Txhdhf8v\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Txhdhf8v_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Txhdhf8v\"\n              id=\"radio_Txhdhf8v_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will throw a <code>MethodError</code> because <code>String</code> is not part of the Union.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Txhdhf8v_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Txhdhf8v\"\n              id=\"radio_Txhdhf8v_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will throw a <code>TypeError</code> due to the type mismatch.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Txhdhf8v_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Txhdhf8v\"\n              id=\"radio_Txhdhf8v_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will automatically convert the string to an integer.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_Txhdhf8v_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_Txhdhf8v\"\n              id=\"radio_Txhdhf8v_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It will work without issue because <code>String</code> is compatible with <code>Union</code>.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='Txhdhf8v_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_Txhdhf8v').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_Txhdhf8v')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_Txhdhf8v\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('Txhdhf8v_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_Txhdhf8v\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_Txhdhf8v\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#63722c20 .cell execution_count=97}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=98}\n**Question 5. How does the `add_one` function handle both `Int` and `Float64` types?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction add_one(x::Union{Int, Float64})\n    return x + 1\nend\n\nprintln(add_one(3))     # Output: 4 (Int)\nprintln(add_one(2.5))   # Output: 3.5 (Float64)\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#12c44f5d .cell execution_count=98}\n\n::: {.cell-output .cell-output-display execution_count=99}\n```{=html}\n<script>\nvar ID = \"32FDdMgf\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='32FDdMgf' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_32FDdMgf\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_32FDdMgf_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_32FDdMgf\"\n              id=\"radio_32FDdMgf_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It requires type checking before execution.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_32FDdMgf_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_32FDdMgf\"\n              id=\"radio_32FDdMgf_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It only works for <code>Float64</code> types.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_32FDdMgf_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_32FDdMgf\"\n              id=\"radio_32FDdMgf_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It works for both types without needing separate methods.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_32FDdMgf_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_32FDdMgf\"\n              id=\"radio_32FDdMgf_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It throws an error for <code>Int</code> but works for <code>Float64</code>.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='32FDdMgf_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_32FDdMgf').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_32FDdMgf')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_32FDdMgf\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('32FDdMgf_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_32FDdMgf\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_32FDdMgf\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::\n\n## Special Types\n\nJulia provides several special types to handle different programming needs, including types for flexible assignments, missing values, and functions without specific return values.\n\n### `Nothing`\n\nThe `Nothing` type represents the absence of a meaningful value, commonly used when a function does not return anything. It‚Äôs similar to `void` in other programming languages. Functions in Julia that do not return a value explicitly return `nothing` by default.\n\n::: {#9f013c42 .cell execution_count=99}\n``` {.julia .cell-code}\n# Example of a function that returns `Nothing`\nfunction print_message(msg::String)\n    println(msg)\n    return nothing  # Explicitly returns `nothing`\nend\n\nresult = print_message(\"Hello!\")  # Returns `nothing`\nprintln(result === nothing)       # Output: true\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello!\ntrue\n```\n:::\n:::\n\n\nUsing `Nothing` is useful when you want to indicate that a function has no specific return value, yet you still want to call it as part of a larger program flow.\n\n### `Any`\n\n`Any` is the most general type in Julia and serves as the root of Julia‚Äôs type hierarchy. Declaring a variable or argument as `Any` allows it to hold values of any type, making it versatile but potentially less performant since Julia cannot infer a specific type.\n\n::: {#aeeef673 .cell execution_count=100}\n``` {.julia .cell-code}\n# Example of using `Any` as a type\nfunction describe(value::Any)\n    println(\"Value: \", value)\n    println(\"Type: \", typeof(value))\nend\n\ndescribe(42)         # Works with Int\ndescribe(\"Hello\")    # Works with String\ndescribe(3.14)       # Works with Float64\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValue: 42\nType: Int64\nValue: Hello\nType: String\nValue: 3.14\nType: Float64\n```\n:::\n:::\n\n\nUsing `Any` can be beneficial when handling inputs of unpredictable types, such as in data processing functions where input data may be heterogeneous.\n\n### `Missing`\n\nThe `Missing` type is used to represent missing or unknown data, especially useful in data analysis. Julia‚Äôs `missing` value is an instance of `Missing` and can be assigned to variables or included in data structures like arrays and tables. Operations with `missing` generally propagate `missing` to indicate the presence of missing data.\n\n::: {#0d4e70b5 .cell execution_count=101}\n``` {.julia .cell-code}\n# Example of using `missing` in an array\ndata = [1, 2, missing, 4, 5]\n\n# Check for missing values in the array\nfor item in data\n    if item === missing\n        println(\"Missing data detected.\")\n    else\n        println(\"Value: \", item)\n    end\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nValue: 1\nValue: 2\nMissing data detected.\nValue: 4\nValue: 5\n```\n:::\n:::\n\n\nThe `missing` value enables handling of incomplete data in Julia programs without causing errors, making it especially useful in fields like data science.\n\nIn data analysis, you often want to perform calculations or operations on data while ignoring `missing` values. Julia provides the `skipmissing` function, which creates an iterator that skips over any `missing` values in a collection.\n\n::: {#875add93 .cell execution_count=102}\n``` {.julia .cell-code}\nusing Statistics\n\n# Example array with missing values\ndata = [1, 2, missing, 4, 5, missing, 7]\n\n# Summing values while skipping missing entries\nsum_no_missing = sum(skipmissing(data))\nprintln(\"Sum without missing values: \", sum_no_missing)  # Output: 19\n\n# Calculating the mean while skipping missing values\nmean_no_missing = mean(skipmissing(data))\nprintln(\"Mean without missing values: \", mean_no_missing)  # Output: 3.8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSum without missing values: 19\nMean without missing values: 3.8\n```\n:::\n:::\n\n\nIn this example:\n\n- `skipmissing(data)` returns an iterator that excludes `missing` values from the `data` array.\n- Using `sum(skipmissing(data))` and `mean(skipmissing(data))` allows us to calculate the sum and mean, respectively, without considering any `missing` entries.\n\nThe `skipmissing` function is especially useful when handling datasets with incomplete data, enabling accurate calculations without manually filtering out `missing` values.\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Special Types in Julia\n\n\n\n::: {#6f2aa92f .cell execution_count=104}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=105}\n**Question 1. What does the `Nothing` type represent in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#b45b1a6a .cell execution_count=105}\n\n::: {.cell-output .cell-output-display execution_count=106}\n```{=html}\n<script>\nvar ID = \"EbJ2dWW4\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='EbJ2dWW4' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_EbJ2dWW4\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_EbJ2dWW4_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_EbJ2dWW4\"\n              id=\"radio_EbJ2dWW4_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It is used for undefined variables.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_EbJ2dWW4_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_EbJ2dWW4\"\n              id=\"radio_EbJ2dWW4_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It is a placeholder for missing data.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_EbJ2dWW4_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_EbJ2dWW4\"\n              id=\"radio_EbJ2dWW4_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It represents the absence of a meaningful value.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_EbJ2dWW4_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_EbJ2dWW4\"\n              id=\"radio_EbJ2dWW4_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It is a special type for numeric values.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='EbJ2dWW4_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_EbJ2dWW4').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_EbJ2dWW4')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_EbJ2dWW4\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('EbJ2dWW4_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_EbJ2dWW4\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_EbJ2dWW4\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#2624deff .cell execution_count=106}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=107}\n**Question 2. What is the result of calling the following function in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\n# Example of a function that returns `Nothing`\nfunction print_message(msg::String)\n    println(msg)\n    return nothing  # Explicitly returns `nothing`\nend\n\nresult = print_message(\"Hello!\")\nprintln(result === nothing)  # Output: true\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#99ca65a9 .cell execution_count=107}\n\n::: {.cell-output .cell-output-display execution_count=108}\n```{=html}\n<script>\nvar ID = \"LdWrSs2Q\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='LdWrSs2Q' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_LdWrSs2Q\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_LdWrSs2Q_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_LdWrSs2Q\"\n              id=\"radio_LdWrSs2Q_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The function throws an error because nothing cannot be returned.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_LdWrSs2Q_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_LdWrSs2Q\"\n              id=\"radio_LdWrSs2Q_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>nothing</code> is returned and the output is true.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_LdWrSs2Q_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_LdWrSs2Q\"\n              id=\"radio_LdWrSs2Q_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        <code>nothing</code> is returned but the output is false.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_LdWrSs2Q_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_LdWrSs2Q\"\n              id=\"radio_LdWrSs2Q_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        The function returns a string &#39;nothing&#39;.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='LdWrSs2Q_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_LdWrSs2Q').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_LdWrSs2Q')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_LdWrSs2Q\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 2;\n    var msgBox = document.getElementById('LdWrSs2Q_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_LdWrSs2Q\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_LdWrSs2Q\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#37bedf56 .cell execution_count=108}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=109}\n**Question 3. What is the advantage of using `Any` as a type in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\n# Example of using `Any` as a type\nfunction describe(value::Any)\n    println(\"Value: \", value)\n    println(\"Type: \", typeof(value))\nend\n\ndescribe(42)         # Works with Int\ndescribe(\"Hello\")    # Works with String\ndescribe(3.14)       # Works with Float64\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#eacf3de5 .cell execution_count=109}\n\n::: {.cell-output .cell-output-display execution_count=110}\n```{=html}\n<script>\nvar ID = \"pu0uYlA4\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='pu0uYlA4' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_pu0uYlA4\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_pu0uYlA4_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_pu0uYlA4\"\n              id=\"radio_pu0uYlA4_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It allows variables to hold any type, making the code flexible.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_pu0uYlA4_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_pu0uYlA4\"\n              id=\"radio_pu0uYlA4_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It prevents runtime errors related to data types.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_pu0uYlA4_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_pu0uYlA4\"\n              id=\"radio_pu0uYlA4_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It increases performance by restricting the type of variable.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_pu0uYlA4_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_pu0uYlA4\"\n              id=\"radio_pu0uYlA4_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It makes type inference more precise.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='pu0uYlA4_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_pu0uYlA4').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_pu0uYlA4')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_pu0uYlA4\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('pu0uYlA4_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_pu0uYlA4\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_pu0uYlA4\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#4c6bd86b .cell execution_count=110}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=111}\n**Question 4. What does the following code do in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\ndata = [1, 2, missing, 4, 5]\nfor item in data\n    if item === missing\n        println(\"Missing data detected.\")\n    else\n        println(\"Value: \", item)\n    end\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#5b3fa015 .cell execution_count=111}\n\n::: {.cell-output .cell-output-display execution_count=112}\n```{=html}\n<script>\nvar ID = \"ntLvQSx9\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='ntLvQSx9' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_ntLvQSx9\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_ntLvQSx9_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_ntLvQSx9\"\n              id=\"radio_ntLvQSx9_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It throws an error when encountering missing data.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_ntLvQSx9_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_ntLvQSx9\"\n              id=\"radio_ntLvQSx9_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It replaces missing data with a default value.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_ntLvQSx9_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_ntLvQSx9\"\n              id=\"radio_ntLvQSx9_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It sums all the values and skips missing ones.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_ntLvQSx9_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_ntLvQSx9\"\n              id=\"radio_ntLvQSx9_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It checks for missing values and prints a message for each.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='ntLvQSx9_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_ntLvQSx9').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_ntLvQSx9')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_ntLvQSx9\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('ntLvQSx9_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_ntLvQSx9\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_ntLvQSx9\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#7a0a3c79 .cell execution_count=112}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=113}\n**Question 5. What is the purpose of the `skipmissing` function in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nusing Statistics\n\n# Example array with missing values\ndata = [1, 2, missing, 4, 5, missing, 7]\n\n# Summing values while skipping missing entries\nsum_no_missing = sum(skipmissing(data))\nprintln(\"Sum without missing values: \", sum_no_missing)  # Output: 19\n\n# Calculating the mean while skipping missing values\nmean_no_missing = mean(skipmissing(data))\nprintln(\"Mean without missing values: \", mean_no_missing)  # Output: 3.8\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#8b95e782 .cell execution_count=113}\n\n::: {.cell-output .cell-output-display execution_count=114}\n```{=html}\n<script>\nvar ID = \"5XM3VoI1\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='5XM3VoI1' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_5XM3VoI1\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5XM3VoI1_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5XM3VoI1\"\n              id=\"radio_5XM3VoI1_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It replaces <code>missing</code> values with <code>0</code>.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5XM3VoI1_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5XM3VoI1\"\n              id=\"radio_5XM3VoI1_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It prints out the number of <code>missing</code> values.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5XM3VoI1_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5XM3VoI1\"\n              id=\"radio_5XM3VoI1_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It raises an error if <code>missing</code> values are encountered.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_5XM3VoI1_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_5XM3VoI1\"\n              id=\"radio_5XM3VoI1_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It creates an iterator that skips <code>missing</code> values during computations.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='5XM3VoI1_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_5XM3VoI1').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_5XM3VoI1')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_5XM3VoI1\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('5XM3VoI1_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_5XM3VoI1\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_5XM3VoI1\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#ab44c1ac .cell execution_count=114}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=115}\n**Question 6. What is the main use of the `Missing` type in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\n# Example of using `missing` in an array\ndata = [1, 2, missing, 4, 5]\n\n# Check for missing values in the array\nfor item in data\n    if item === missing\n        println(\"Missing data detected.\")\n    else\n        println(\"Value: \", item)\n    end\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#cf6d2ab9 .cell execution_count=115}\n\n::: {.cell-output .cell-output-display execution_count=116}\n```{=html}\n<script>\nvar ID = \"OmOPytHE\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='OmOPytHE' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_OmOPytHE\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_OmOPytHE_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_OmOPytHE\"\n              id=\"radio_OmOPytHE_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        To represent variables with no value assigned.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_OmOPytHE_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_OmOPytHE\"\n              id=\"radio_OmOPytHE_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        To hold any type of data including missing entries.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_OmOPytHE_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_OmOPytHE\"\n              id=\"radio_OmOPytHE_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        To represent missing or unknown data in a collection.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_OmOPytHE_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_OmOPytHE\"\n              id=\"radio_OmOPytHE_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        To prevent errors when dealing with <code>Nothing</code>.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='OmOPytHE_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_OmOPytHE').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_OmOPytHE')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_OmOPytHE\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('OmOPytHE_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_OmOPytHE\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_OmOPytHE\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::\n\n## Errors and Exception Handling\n\nJulia provides a powerful framework for managing and handling errors, which helps in writing robust programs. Error handling in Julia involves various built-in error types and mechanisms, including `throw` for raising errors and `try`/`catch` blocks for handling exceptions.\n\n### Common Error Types in Julia\n\nJulia has several built-in error types that are commonly used:\n\n- **`ArgumentError`**: Raised when a function receives an argument that is inappropriate or out of expected range.\n- **`BoundsError`**: Occurs when trying to access an index that is out of bounds for an array or collection.\n- **`DivisionByZeroError`**: Triggered when an attempt is made to divide by zero.\n- **`IOError`**: Raised for errors related to input/output operations, such as reading from or writing to files.\n\n### Raising Errors with `throw`\n\nIn Julia, you can explicitly raise an error using the `throw` function. This is useful for defining custom error conditions in your code. To throw an error, call `throw` with an instance of an error type:\n\n::: {#9c1e1120 .cell execution_count=116}\n``` {.julia .cell-code}\nfunction divide(a, b)\n    if b == 0\n        throw(DivisionByZeroError(\"Division by zero is not allowed\"))\n    end\n    return a / b\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=117}\n```\ndivide (generic function with 1 method)\n```\n:::\n:::\n\n\nIn this example, the function `divide` will throw a `DivisionByZeroError` if the second argument `b` is zero, making the function safer and more robust.\n\n### Handling Errors with `try`/`catch`\n\nJulia provides `try`/`catch` blocks for managing exceptions gracefully. Code within a `try` block runs until an error is encountered. If an error is thrown, control passes to the `catch` block, where you can handle the error.\n\nHere‚Äôs an example of using `try`/`catch` with the `divide` function:\n\n::: {#c851e357 .cell execution_count=117}\n``` {.julia .cell-code}\ntry\n    println(divide(10, 0))  # Will raise an error\ncatch e\n    println(\"Error: \", e)  # Handles the error\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError: UndefVarError(:DivisionByZeroError, Main)\n```\n:::\n:::\n\n\nIn this example:\n- If `divide(10, 0)` raises an error, the program catches it and prints a custom message instead of stopping execution.\n- The variable `e` holds the error, which can be printed or used for further handling.\n\n### Using `finally` for Cleanup\n\nIn Julia, `finally` is a block used in conjunction with `try` and `catch` to ensure that certain cleanup actions are executed regardless of whether an error occurs or not. This is useful for tasks like closing files, releasing resources, or resetting variables that need to be done after the execution of a `try-catch` block.\n\nThe code inside the `finally` block is always executed, even if an exception is thrown and caught. This makes it ideal for situations where you need to guarantee that some actions occur after the main code runs, like resource deallocation.\n\n#### Syntax:\n\n::: {#55616e60 .cell execution_count=118}\n``` {.julia .cell-code}\ntry\n    # Code that might throw an error\ncatch exception\n    # Code to handle the error\nfinally\n    # Cleanup code that will always run\nend\n```\n:::\n\n\n#### Example:\n\n::: {#a0f8fb6f .cell execution_count=119}\n``` {.julia .cell-code}\nfunction safe_file_read(filename::String)\n    file = nothing\n    try\n        file = open(filename, \"r\")\n        data = read(file, String)\n        return data\n    catch e\n        println(\"An error occurred: \", e)\n    finally\n        if file !== nothing\n            close(file)\n            println(\"File closed.\")\n        end\n    end\nend\n\n# Test with a valid file\nprintln(safe_file_read(\"example.txt\"))\n\n# Test with an invalid file\nprintln(safe_file_read(\"nonexistent.txt\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFile closed.\n\nAn error occurred: SystemError(\"opening file \\\"nonexistent.txt\\\"\", 2, nothing)\nnothing\n```\n:::\n:::\n\n\n#### Explanation:\n- The `finally` block ensures that the file is always closed after reading, even if an error occurs (e.g., file not found, read error).\n- If the `open` operation is successful, the `finally` block will still execute and close the file, ensuring proper resource management.\n- If an exception is thrown in the `try` block (like a non-existent file), it will be caught and handled by the `catch` block, but the `finally` block will still execute to close the file (if opened).\n\n#### Use Cases for `finally`:\n- Closing files or network connections.\n- Releasing resources (e.g., database connections, locks).\n- Resetting the program state to a known clean state.\n\n### Quiz\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Quiz: Errors and Exception Handling in Julia\n\n\n\n::: {#d47db0ba .cell execution_count=121}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=122}\n**Question 1. Which error type is raised when an index is out of bounds in an array?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#b78f1a25 .cell execution_count=122}\n\n::: {.cell-output .cell-output-display execution_count=123}\n```{=html}\n<script>\nvar ID = \"P3O00LjO\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='P3O00LjO' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_P3O00LjO\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_P3O00LjO_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_P3O00LjO\"\n              id=\"radio_P3O00LjO_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        ArgumentError\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_P3O00LjO_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_P3O00LjO\"\n              id=\"radio_P3O00LjO_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        IOError\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_P3O00LjO_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_P3O00LjO\"\n              id=\"radio_P3O00LjO_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        DivisionByZeroError\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_P3O00LjO_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_P3O00LjO\"\n              id=\"radio_P3O00LjO_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        BoundsError\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='P3O00LjO_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_P3O00LjO').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_P3O00LjO')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_P3O00LjO\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('P3O00LjO_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_P3O00LjO\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_P3O00LjO\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#55876dc9 .cell execution_count=123}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=124}\n**Question 2. What does the following code do in Julia?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction divide(a, b)\n    if b == 0\n        throw(DivisionByZeroError(\"Division by zero is not allowed\"))\n    end\n    return a / b\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#d51cd53c .cell execution_count=124}\n\n::: {.cell-output .cell-output-display execution_count=125}\n```{=html}\n<script>\nvar ID = \"NwaRN4sA\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='NwaRN4sA' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_NwaRN4sA\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_NwaRN4sA_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_NwaRN4sA\"\n              id=\"radio_NwaRN4sA_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        It performs division and returns the result.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_NwaRN4sA_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_NwaRN4sA\"\n              id=\"radio_NwaRN4sA_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        It raises an ArgumentError when a or b is invalid.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_NwaRN4sA_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_NwaRN4sA\"\n              id=\"radio_NwaRN4sA_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        It raises a DivisionByZeroError when b equals 0.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_NwaRN4sA_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_NwaRN4sA\"\n              id=\"radio_NwaRN4sA_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        It throws a BoundsError if a or b are not numbers.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='NwaRN4sA_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_NwaRN4sA').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_NwaRN4sA')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_NwaRN4sA\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('NwaRN4sA_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_NwaRN4sA\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_NwaRN4sA\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#e5753921 .cell execution_count=125}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=126}\n**Question 3. What happens when the following `try`/`catch` block is executed?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\ntry\n    println(divide(10, 0))  # Will raise an error\ncatch e\n    println(\"Error: \", e)  # Handles the error\nend\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#d1859110 .cell execution_count=126}\n\n::: {.cell-output .cell-output-display execution_count=127}\n```{=html}\n<script>\nvar ID = \"iGFnEL8B\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='iGFnEL8B' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_iGFnEL8B\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_iGFnEL8B_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_iGFnEL8B\"\n              id=\"radio_iGFnEL8B_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The error is caught and a custom error message is printed.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_iGFnEL8B_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_iGFnEL8B\"\n              id=\"radio_iGFnEL8B_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The program prints the result of the division.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_iGFnEL8B_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_iGFnEL8B\"\n              id=\"radio_iGFnEL8B_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        The program silently ignores the error.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_iGFnEL8B_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_iGFnEL8B\"\n              id=\"radio_iGFnEL8B_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        The program throws an error and stops execution.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='iGFnEL8B_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_iGFnEL8B').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_iGFnEL8B')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_iGFnEL8B\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('iGFnEL8B_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_iGFnEL8B\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_iGFnEL8B\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#87f27e1f .cell execution_count=127}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=128}\n**Question 4. What is the purpose of the `finally` block in Julia's exception handling?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#c823a13b .cell execution_count=128}\n\n::: {.cell-output .cell-output-display execution_count=129}\n```{=html}\n<script>\nvar ID = \"G9h2iL3J\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='G9h2iL3J' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_G9h2iL3J\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_G9h2iL3J_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_G9h2iL3J\"\n              id=\"radio_G9h2iL3J_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        To perform the main logic of the program.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_G9h2iL3J_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_G9h2iL3J\"\n              id=\"radio_G9h2iL3J_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        To rethrow any errors that are caught.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_G9h2iL3J_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_G9h2iL3J\"\n              id=\"radio_G9h2iL3J_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        To catch all errors and handle them.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_G9h2iL3J_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_G9h2iL3J\"\n              id=\"radio_G9h2iL3J_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        To ensure that cleanup code runs regardless of whether an error occurs.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='G9h2iL3J_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_G9h2iL3J').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_G9h2iL3J')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_G9h2iL3J\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 4;\n    var msgBox = document.getElementById('G9h2iL3J_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_G9h2iL3J\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_G9h2iL3J\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#a10a4627 .cell execution_count=129}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=130}\n**Question 5. What is the output of the following code?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-30px\"> </p>\n\n```julia\nfunction safe_file_read(filename::String)\n    file = nothing\n    try\n        file = open(filename, \"r\")\n        data = read(file, String)\n        return data\n    catch e\n        println(\"An error occurred: \", e)\n    finally\n        if file !== nothing\n            close(file)\n            println(\"File closed.\")\n        end\n    end\nend\n\n# Test with a valid file\nprintln(safe_file_read(\"example.txt\"))\n\n# Test with an invalid file\nprintln(safe_file_read(\"nonexistent.txt\"))\n```\n\n<p style=\"margin-top:-20px\"> </p>\n\n::: {#716d7790 .cell execution_count=130}\n\n::: {.cell-output .cell-output-display execution_count=131}\n```{=html}\n<script>\nvar ID = \"rvr29z2f\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='rvr29z2f' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_rvr29z2f\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_rvr29z2f_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_rvr29z2f\"\n              id=\"radio_rvr29z2f_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        The program prints the error but skips file closing.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_rvr29z2f_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_rvr29z2f\"\n              id=\"radio_rvr29z2f_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        The program raises an error and does not close the file.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_rvr29z2f_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_rvr29z2f\"\n              id=\"radio_rvr29z2f_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        The program tries to read a file, catches errors, and always closes the file.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_rvr29z2f_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_rvr29z2f\"\n              id=\"radio_rvr29z2f_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        The program prints data from the file and closes it.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='rvr29z2f_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_rvr29z2f').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_rvr29z2f')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_rvr29z2f\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 3;\n    var msgBox = document.getElementById('rvr29z2f_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_rvr29z2f\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_rvr29z2f\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n::: {#19aee2e1 .cell execution_count=131}\n\n::: {.cell-output .cell-output-display .cell-output-markdown execution_count=132}\n**Question 6. Which of the following is an appropriate use case for the `finally` block?**\n\n:::\n:::\n\n\n<p style=\"margin-top:-50px\"> </p>\n\n::: {#ec646bcd .cell execution_count=132}\n\n::: {.cell-output .cell-output-display execution_count=133}\n```{=html}\n<script>\nvar ID = \"4nTusYbz\"\n</script>\n<form class=\"mx-2 my-3 mw-100\" name='WeaveQuestion' data-id='4nTusYbz' data-controltype='' onSubmit='return false;'>\n  <div class='form-group '>\n    <div class='controls'>\n      <div class=\"form\" id=\"controls_4nTusYbz\" correct='-1' attempts='0'>\n        <div style=\"padding-top: 5px\">\n    <fieldset style=\"border:0px\">\n<legend style=\"display: none\" aria-label=\"Select an item\">Select an item</legend>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4nTusYbz_1\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4nTusYbz\"\n              id=\"radio_4nTusYbz_1\" value=\"1\">\n      </input>\n      <span class=\"label-body px-1\">\n        Ensuring a file is closed after reading, regardless of errors.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4nTusYbz_2\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4nTusYbz\"\n              id=\"radio_4nTusYbz_2\" value=\"2\">\n      </input>\n      <span class=\"label-body px-1\">\n        To handle errors and return a value from the <code>finally</code> block.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4nTusYbz_3\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4nTusYbz\"\n              id=\"radio_4nTusYbz_3\" value=\"3\">\n      </input>\n      <span class=\"label-body px-1\">\n        To catch all exceptions without handling them.\n      </span>\n    </label>\n</div>\n<div class=\"form-check\">\n    <label class=\"form-check-label\" for=\"radio_4nTusYbz_4\">\n      <input class=\"form-check-input\" type=\"radio\" name=\"radio_4nTusYbz\"\n              id=\"radio_4nTusYbz_4\" value=\"4\">\n      </input>\n      <span class=\"label-body px-1\">\n        To prevent specific types of errors from being raised.\n      </span>\n    </label>\n</div>\n</fieldset>\n\n    \n        </div>\n      </div>\n      <div id='4nTusYbz_message' style=\"padding-bottom: 15px\"></div>\n    </div>\n  </div>\n</form>\n<script>\ndocument.getElementById('controls_4nTusYbz').addEventListener(\"quizquestion_answer\", (e) => {\n\t      var o = document.getElementById('controls_4nTusYbz')\n\t      var atts = Number(o.getAttribute(\"attempts\"))\n\t      o.setAttribute(\"correct\",  e.detail.correct);\n\t      o.setAttribute(\"attempts\", atts + 1)\n\t  }, true)\n</script>\n\n<script text='text/javascript'>\ndocument.querySelectorAll('input[name=\"radio_4nTusYbz\"]').forEach(function(rb) {\nrb.addEventListener(\"change\", function() {\n    var correct = rb.value == 1;\n    var msgBox = document.getElementById('4nTusYbz_message');\n    \n  if(correct) {\n    msgBox.innerHTML = \"<div class='pluto-output admonition note alert alert-success'><span> üëç&nbsp; Correct </span></div>\";\n    var explanation = document.getElementById(\"explanation_4nTusYbz\")\n    if (explanation != null) {\n       explanation.style.display = \"none\";\n    }\n      const correct_answer   = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 1}});\n  this.dispatchEvent(correct_answer);\n  //typeof correct_answer   != \"undefined\" && this.dispatchEvent(correct_answer);\n\n  } else {\n    msgBox.innerHTML = \"<div class='pluto-output admonition alert alert-danger'><span>üëé&nbsp; Incorrect </span></div>\";\n    var explanation = document.getElementById(\"explanation_4nTusYbz\")\n    if (explanation != null) {\n       explanation.style.display = \"block\";\n    }\n      const incorrect_answer = new CustomEvent(\"quizquestion_answer\", {bubbles:true, detail:{correct: 0}});\n  this.dispatchEvent(incorrect_answer);\n  //typeof incorrect_answer != \"undefined\" && this.dispatchEvent(incorrect_answer);\n\n  }\n\n})});\n\n</script>\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "advanced-types_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}