{
  "hash": "2058a90bcc9ed44dc4b35c3d0251399e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Julia Syntax Essentials and Variable Scoping\"\npage-layout: article\njupyter: julia-1.11\n---\n\n\n\nIn this page, we present the fundamentals of Julia syntax. If you want a cheatsheet, please \nvisit [this page](https://cheatsheet.juliadocs.org).\n\n## Basics\n\n### Assignment\n\nIn Julia, variables are assigned using the `=` operator:\n\n::: {#c2c9d513 .cell execution_count=2}\n``` {.julia .cell-code}\nx = 5\ny = \"Hello, Julia!\"\nnothing #| hide_line\n```\n:::\n\n\nJulia is dynamically typed, which means variables do not require explicit type declarations. Types are inferred based on the assigned value.\n\n::: {#62ce92af .cell execution_count=3}\n``` {.julia .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=193}\n```\nInt64\n```\n:::\n:::\n\n\n::: {#7f8b5da5 .cell execution_count=4}\n``` {.julia .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=194}\n```\nString\n```\n:::\n:::\n\n\n### Unicode Characters\n\nJulia supports Unicode characters, allowing you to use symbols and mathematical notation in variable names and operations. For instance, Greek letters and symbols like α and β can be typed using the tab completion shortcut:\n\n- Type `\\alpha`, then press `Tab` to get `α`.\n- Type `\\beta`, then press `Tab` to get `β`.\n\n::: {#e52c6ee0 .cell execution_count=5}\n``` {.julia .cell-code}\nα = 10\nβ = α + 5\nnothing #| hide_line\n```\n:::\n\n\nUnicode is especially helpful when writing mathematical code, making it more readable and expressive.\n\n### Comments\n\nComments are written with the `#` symbol. Julia also supports multiline comments with `#=` and `=#`:\n\n::: {#5fa52508 .cell execution_count=6}\n``` {.julia .cell-code}\n# This is a single-line comment\n\n#= \nThis is a \nmultiline comment \n=#\n```\n:::\n\n\n### Print\n\nTo display output in Julia, you can use the `println` function:\n\n::: {#1b018c31 .cell execution_count=7}\n``` {.julia .cell-code}\nprintln(\"Hello, Julia!\")  # Prints: Hello, Julia!\nprintln(\"The value of α is \", α)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Julia!\nThe value of α is 10\n```\n:::\n:::\n\n\nPrinting output is helpful for debugging and tracking variable values in your code.\n\n### The `@show` Macro\n\nJulia also provides the `@show` macro, which is particularly useful for debugging. It prints both the name of a variable and its value in the following format: `variable_name = value`.\n\n::: {#7aa331ec .cell execution_count=8}\n``` {.julia .cell-code}\nx = 42\n@show x   # Prints: x = 42\nnothing #| hide_line\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx = 42\n```\n:::\n:::\n\n\nYou can also use `@show` with multiple variables or expressions:\n\n::: {#a32f3ddb .cell execution_count=9}\n``` {.julia .cell-code}\na = 10\nb = 20\n@show a + b  # Prints: a + b = 30\n@show a, b   # Prints: a = 10, b = 20\nnothing #| hide_line\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na + b = 30\n(a, b) = (10, 20)\n```\n:::\n:::\n\n\nThe `@show` macro is convenient for quick checks on variable values and expressions without needing to construct strings manually.\n\n## Control Flows and Logical Operators\n\nControl flow in Julia is managed through conditional statements and loops. Logical operators allow for conditions to be combined or negated.\n\n### Conditional Statements\nJulia supports `if`, `elseif`, and `else` for conditional checks:\n\n::: {#86355858 .cell execution_count=10}\n``` {.julia .cell-code}\nx = 10\n\nif x > 5\n    println(\"x is greater than 5\")\nelseif x == 5\n    println(\"x is equal to 5\")\nelse\n    println(\"x is less than 5\")\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is greater than 5\n```\n:::\n:::\n\n\nIn Julia, blocks for `if`, `elseif`, and `else` are closed with `end`. Indentation is not required by syntax but is recommended for readability.\n\n::: {.callout-tip}\nYou can follow the [Blue Style](https://github.com/JuliaDiff/BlueStyle) conventions for Julia code. If you want to format your code you can use the package [JuliaFormatter.jl](https://domluna.github.io/JuliaFormatter.jl).\n:::\n\n### Ternary Operator\nFor simple conditional assignments, Julia has a ternary operator `? :`:\n\n::: {#0766d958 .cell execution_count=11}\n``` {.julia .cell-code}\ny = (x > 5) ? \"Greater\" : \"Not greater\"\nprintln(y)  # Outputs \"Greater\" if x > 5, otherwise \"Not greater\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGreater\n```\n:::\n:::\n\n\n### Logical Operators\nJulia includes standard logical operators to build more complex conditions:\n\n- `&&` for logical AND\n- `||` for logical OR\n- `!` for logical NOT\n\n::: {#d87179a2 .cell execution_count=12}\n``` {.julia .cell-code}\na = true\nb = false\n\nprintln(a && b)  # Outputs: false\nprintln(a || b)  # Outputs: true\nprintln(!a)      # Outputs: false\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfalse\ntrue\nfalse\n```\n:::\n:::\n\n\n### Loops\nJulia provides `for` and `while` loops for iterative tasks.\n\n**For Loop**: The `for` loop iterates over a range or collection:\n\n::: {#5c446dda .cell execution_count=13}\n``` {.julia .cell-code}\nfor i in 1:5\n    println(i)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n```\n:::\n:::\n\n\nThis loop prints numbers from 1 to 5. The range `1:5` uses Julia’s `:` operator to create a sequence.\n\n::: {.callout-note}\nThe for construct can loop on any iterable object. Visit the [documentation](https://docs.julialang.org/en/v1/manual/control-flow/#man-loops)\nfor details.\n:::\n\n**While Loop**: The `while` loop executes as long as a condition is true:\n\n::: {#90ef5468 .cell execution_count=14}\n``` {.julia .cell-code}\ncount = 1\n\nwhile count <= 5\n    println(count)\n    count += 1\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n```\n:::\n:::\n\n\nThis loop will print numbers from 1 to 5 by incrementing `count` each time.\n\n### Breaking and Continuing\nJulia also has `break` and `continue` for loop control.\n\n- `break` exits the loop completely.\n- `continue` skips the current iteration and moves to the next one.\n\n::: {#00c83891 .cell execution_count=15}\n``` {.julia .cell-code}\nfor i in 1:5\n    if i == 3\n        continue  # Skips the number 3\n    end\n    println(i)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n4\n5\n```\n:::\n:::\n\n\n::: {#27527a7c .cell execution_count=16}\n``` {.julia .cell-code}\nfor i in 1:5\n    if i == 4\n        break  # Exits the loop when i is 4\n    end\n    println(i)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n```\n:::\n:::\n\n\nThese control flows and logical operators allow for flexibility in executing conditional logic and repeated operations in Julia.\n\n## Arithmetics\n\nJulia supports a variety of arithmetic operations that can be performed on numeric types. Below are some of the most commonly used operations:\n\n### Basic Arithmetic Operations\nYou can perform basic arithmetic operations using standard operators:\n\n- **Addition**: `+`\n- **Subtraction**: `-`\n- **Multiplication**: `*`\n- **Division**: `/` (returns a floating-point result) and `//` (returns a rational number)\n\n::: {#70c0ef83 .cell execution_count=17}\n``` {.julia .cell-code}\na = 10\nb = 3\n\nsum = a + b           # Outputs: 13\ndifference = a - b    # Outputs: 7\nproduct = a * b       # Outputs: 30\nquotient = a / b      # Outputs: 3.3333...\nrational = a // b     # Outputs: 10//3\nnothing #| hide_line\n```\n:::\n\n\n### Modulo Operation\nThe modulo operator `%` returns the remainder of a division operation. It is useful for determining if a number is even or odd, or for wrapping around values.\n\n::: {#ffa2066a .cell execution_count=18}\n``` {.julia .cell-code}\nmodulus_result = a % b  # Outputs: 1 (remainder of 10 divided by 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=208}\n```\n1\n```\n:::\n:::\n\n\n### Exponentiation\nYou can perform exponentiation using the `^` operator. \n\n::: {#42cc9089 .cell execution_count=19}\n``` {.julia .cell-code}\nb = a ^ 2          # Outputs: 100 (10 squared)\n```\n\n::: {.cell-output .cell-output-display execution_count=209}\n```\n100\n```\n:::\n:::\n\n\n### Using Arithmetic in Control Flow\nYou can combine arithmetic operations with control flow statements. For example, you can use the modulo operation to check if a number is even or odd:\n\n::: {#26e101bc .cell execution_count=20}\n``` {.julia .cell-code}\nif a % 2 == 0\n    println(\"$a is even\")\nelse\n    println(\"$a is odd\")\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10 is even\n```\n:::\n:::\n\n\n### Summary of Arithmetic Operations\n| Operation         | Symbol    | Example        | Result       |\n|-------------------|-----------|----------------|--------------|\n| Addition          | `+`       | `5 + 3`        | `8`          |\n| Subtraction       | `-`       | `5 - 3`        | `2`          |\n| Multiplication    | `*`       | `5 * 3`        | `15`         |\n| Division          | `/`       | `5 / 2`        | `2.5`        |\n| Modulo            | `%`       | `5 % 2`        | `1`          |\n| Exponentiation    | `^`       | `2 ^ 3`        | `8`          |\n\nThese arithmetic operations can be combined and nested to perform complex calculations as needed.\n\n## Functions\n\nJulia offers flexible ways to define functions, with options for positional arguments, keyword arguments, optional arguments with default values, and variable-length arguments. Let’s explore each of these in detail.\n\n### Defining Functions\n\nFunctions in Julia can be defined using either the `function` keyword or the assignment syntax.\n\n::: {#be33f962 .cell execution_count=21}\n``` {.julia .cell-code}\n# Using the `function` keyword\nfunction add(a, b)\n    return a + b\nend\n\n# Using assignment syntax\nmultiply(a, b) = a * b\n\nprintln(add(2, 3))         # Outputs: 5\nprintln(multiply(2, 3))    # Outputs: 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n6\n```\n:::\n:::\n\n\n### Positional and Keyword Arguments\n\nIn Julia, functions can take both positional arguments and keyword arguments.\n\n- **Positional Arguments**: These are listed first in the parameter list and must be provided in the correct order when the function is called. Positional arguments can have default values, but it's not required.\n\n- **Keyword Arguments**: Keyword arguments are specified after a semicolon (`;`) in the parameter list. These arguments must be provided by name when calling the function. Like positional arguments, keyword arguments can have default values, but they don’t have to.\n\n::: {#66d05db3 .cell execution_count=22}\n``` {.julia .cell-code}\nfunction greet(name; punctuation = \"!\")\n    return \"Hello, \" * name * punctuation\nend\n\nprintln(greet(\"Alice\"))                     # Outputs: \"Hello, Alice!\"\nprintln(greet(\"Alice\", punctuation = \"?\"))   # Outputs: \"Hello, Alice?\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, Alice!\nHello, Alice?\n```\n:::\n:::\n\n\nIn this example, `punctuation` is a keyword argument with a default value of `\"!\"`. You could also define a keyword argument without a default value if needed.\n\n### Variable Number of Arguments\nJulia functions can accept an arbitrary number of arguments using the splatting operator `...`. These arguments are gathered into a tuple.\n\n::: {#a4a9b203 .cell execution_count=23}\n``` {.julia .cell-code}\nfunction sum_all(args...)\n    total = 0\n    for x in args\n        total += x\n    end\n    return total\nend\n\nprintln(sum_all(1, 2, 3, 4))  # Outputs: 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\n### Default Values for Optional Arguments\nIn Julia, you can assign default values to both positional and keyword arguments. When the function is called without specifying a value for an argument with a default, the default value is used.\n\n::: {#0648c1d3 .cell execution_count=24}\n``` {.julia .cell-code}\nfunction power(base, exponent=2)\n    return base ^ exponent\nend\n\nprintln(power(3))      # Outputs: 9 (since exponent defaults to 2)\nprintln(power(3, 3))   # Outputs: 27\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9\n27\n```\n:::\n:::\n\n\n### Mutation and the Bang `!` Convention\nIn Julia, functions that modify or mutate their arguments typically end with a `!`, following the \"bang\" convention. This is not enforced by the language but is a widely followed convention in Julia to indicate mutation.\n\n::: {#56054e76 .cell execution_count=25}\n``` {.julia .cell-code}\nfunction add_one!(array)\n    for i in eachindex(array)\n        array[i] += 1\n    end\nend\n\narr = [1, 2, 3]\nadd_one!(arr)\n@show arr  # Outputs: arr = [2, 3, 4]\nnothing #| hide_line\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narr = [2, 3, 4]\n```\n:::\n:::\n\n\nIn this example, `add_one!` modifies the elements of the array `arr`. By convention, the `!` at the end of the function name indicates that the function mutates its input.\n\n### Return Values\nIn Julia, functions automatically return the last evaluated expression. However, you can use the `return` keyword to explicitly specify the output if needed.\n\n::: {#29521358 .cell execution_count=26}\n``` {.julia .cell-code}\nfunction multiply(a, b)\n    a * b  # Returns the result of a * b\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=216}\n```\nmultiply (generic function with 1 method)\n```\n:::\n:::\n\n\n## Scoping and Closure\n\nIn Julia, scoping rules determine the visibility and lifetime of variables. Understanding scope and closures is essential for writing efficient and error-free code.\n\n### Variable Scope\nScope in Julia refers to the region of code where a variable is accessible. There are two primary scopes: global and local.\n\n- **Global Scope**: Variables defined at the top level of a module or script are in the global scope and can be accessed from anywhere in that file. However, modifying global variables from within functions is generally discouraged.\n\n::: {#b25a9870 .cell execution_count=27}\n``` {.julia .cell-code}\nglobal_var = 10\n\nfunction access_global()\n    return global_var\nend\n\naccess_global()  # Outputs: 10\n```\n\n::: {.cell-output .cell-output-display execution_count=217}\n```\n10\n```\n:::\n:::\n\n\n- **Local Scope**: Variables defined within a function or a block (e.g., loops or conditionals) have local scope and cannot be accessed outside of that block.\n\n::: {#caddfe7a .cell execution_count=28}\n``` {.julia .cell-code}\nfunction local_scope_example()\n    local_var = 5\n    return local_var\nend\n\nprintln(local_scope_example())  # Outputs: 5\nprintln(local_var)  # This would cause an error, as local_var is not accessible here\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `local_var` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\nUndefVarError: `local_var` not defined in `Main`\nSuggestion: check for spelling errors or missing imports.\n\nStacktrace:\n [1] top-level scope\n   @ In[218]:7\n```\n:::\n:::\n\n\n### Scope of Variables in `for` Loops\n\nIn Julia, a `for` loop does not create a new local scope for its loop variable. This means that if a loop variable has the same name as an existing global variable, the global variable will be overwritten by the loop variable.\n\nHere's an example:\n\n::: {#81de05aa .cell execution_count=29}\n``` {.julia .cell-code}\ni = 10  # Define a global variable `i`\n\nfor i = 1:3\n    println(i)  # Prints 1, 2, and 3\nend\n\nprintln(\"Outside loop: i = \", i)  # Outputs: 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\nOutside loop: i = 10\n```\n:::\n:::\n\n\nIn this case, the initial value of `i` (10) is replaced by the loop variable. After the loop completes, `i` retains the value from the last iteration (3).\n\n#### Key Point: Avoid Reusing Global Variable Names in Loops\n\nTo avoid unexpected behavior, it’s generally best to use a unique name for loop variables if there's a possibility of a name conflict with global variables. Alternatively, if you intend to retain the original global value after the loop, you can explicitly save the global variable's value before the loop.\n\n### Nested Scopes\nJulia allows for nested functions, which can access variables in their enclosing scopes. This is known as lexical scoping.\n\n::: {#4e272414 .cell execution_count=30}\n``` {.julia .cell-code}\nfunction outer_function(x)\n    y = 2\n    function inner_function(z)\n        return x + y + z\n    end\n    return inner_function\nend\n\nclosure = outer_function(3)\nclosure(4)  # Outputs: 9 (3 + 2 + 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=220}\n```\n9\n```\n:::\n:::\n\n\nIn this example, `inner_function` forms a closure over the variables `x` and `y`, retaining access to them even after `outer_function` has finished executing.\n\n### Closures\nA closure is a function that captures variables from its surrounding lexical scope, allowing the function to use these variables even after the scope where they were defined has ended. Closures are especially useful for creating customized functions or \"function factories.\"\n\n#### Example: Using a Global Variable vs. Capturing a Variable in a Closure\nTo illustrate the difference between referencing a global variable and capturing a variable in a closure, let’s first create a function that uses a global variable:\n\n::: {#f0147531 .cell execution_count=31}\n``` {.julia .cell-code}\nfactor = 2\n\nfunction multiply_by_global(x)\n    return x * factor\nend\n\nprintln(multiply_by_global(5))  # Outputs: 10\n\n# Update the global variable `factor`\nfactor = 3\nprintln(multiply_by_global(5))  # Outputs: 15 (factor is now 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n15\n```\n:::\n:::\n\n\nIn this example, `multiply_by_global` uses the global variable `factor`, so whenever `factor` is updated, the result of calling `multiply_by_global` changes.\n\n#### Example: Capturing a Variable in a Closure\nNow, let’s use a closure to capture the `factor` variable inside a function. Here, the captured value of `factor` remains fixed at the time the closure was created, regardless of changes to the variable afterward.\n\n::: {#bd322acf .cell execution_count=32}\n``` {.julia .cell-code}\nfunction make_multiplier(factor)\n    return (x) -> x * factor  # Returns a closure that captures `factor`\nend\n\ndouble = make_multiplier(2)   # `factor` is captured as 2 in this closure\ntriple = make_multiplier(3)   # `factor` is captured as 3 in this closure\n\nprintln(double(5))  # Outputs: 10\nprintln(triple(5))  # Outputs: 15\n\n# Even if we change `factor` globally, it doesn't affect the closure\nfactor = 10\nprintln(double(5))  # Still outputs: 10\nprintln(triple(5))  # Still outputs: 15\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n15\n10\n15\n```\n:::\n:::\n\n\nIn this example, `make_multiplier` returns a function that captures the `factor` variable when the closure is created. This means that `double` will always multiply by `2`, and `triple` will always multiply by `3`, regardless of any subsequent changes to `factor`.\n\n### Summary\nUsing closures in Julia allows you to \"lock in\" the values of variables from an outer scope at the time of the closure's creation. This differs from referencing global variables directly, where any changes to the variable are reflected immediately. Closures are particularly useful for creating function factories or callbacks that need to retain specific values independently of changes in the global scope.\n\nUnderstanding scope is crucial for performance in Julia. Defining variables within a local scope, such as inside functions, can lead to more efficient code execution. Global variables can lead to performance penalties due to type instability.\n\nIn summary, scoping rules in Julia allow for clear management of variable accessibility and lifespan, while closures enable powerful programming patterns by capturing the context in which they are created. Understanding these concepts is key to writing effective Julia code.\n\n## Exercices\n\n### Exercise 1: Temperature Converter\nWrite a function `convert_temperature` that takes a temperature value and a keyword argument `unit` that can either be `\"C\"` for Celsius or `\"F\"` for Fahrenheit. The function should convert the temperature to the other unit and return the converted value. Use a conditional statement to determine the conversion formula:\n\n- If the unit is `\"C\"`, convert to Fahrenheit using the formula: \\( F = C \\times \\frac{9}{5} + 32 \\)\n- If the unit is `\"F\"`, convert to Celsius using the formula: \\( C = (F - 32) \\times \\frac{5}{9} \\)\n\n**Example Output:**\n```julia\nprintln(convert_temperature(100, unit=\"C\"))  # Outputs: 212.0\nprintln(convert_temperature(32, unit=\"F\"))    # Outputs: 0.0\n```\n\n::: {.callout-tip collapse=\"true\" icon=false}\n## Hint for Exercise 1: Temperature Converter\nIf the `unit` provided is not `\"C\"` or `\"F\"`, you can raise an error using the `throw` statement along with `ArgumentError`. This way, you can inform the user that the input is invalid.\n:::\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Correction of Exercise 1: Temperature Converter\n\n::: {#34e90e5b .cell execution_count=33}\n``` {.julia .cell-code}\nfunction convert_temperature(value; unit)\n    if unit == \"C\"\n        return value * 9/5 + 32  # Convert Celsius to Fahrenheit\n    elseif unit == \"F\"\n        return (value - 32) * 5/9  # Convert Fahrenheit to Celsius\n    else\n        throw(ArgumentError(\"Unit must be 'C' or 'F'\"))\n    end\nend\n\nprintln(convert_temperature(100, unit=\"C\"))  # Outputs: 212.0\nprintln(convert_temperature(32, unit=\"F\"))    # Outputs: 0.0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n212.0\n0.0\n```\n:::\n:::\n\n\n:::\n\n### Exercise 2: Factorial Function with Closure\nCreate a function `make_factorial` that returns a closure. This closure should compute the factorial of a number. The closure should capture a variable that keeps track of the number of times it has been called. When the closure is called, it should return the factorial of the number and the call count.\n\n**Example Output:**\n```julia\nfactorial_closure = make_factorial()\nresult, count = factorial_closure(5)\nprintln(result)  # Outputs: 120\nresult, count = factorial_closure(3)\nprintln(result)  # Outputs: 6\nprintln(\"Function called \", count, \" times\")  # Outputs: 2 times\n```\n\n::: {.callout-tip collapse=\"true\" icon=false}\n## Hint Exercise 2: Factorial Function with Closure\nWhen returning the results from the closure, you can return a pair of values by creating a tuple. In Julia, tuples are created using parentheses, like this: `(value1, value2)`.\n:::\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Correction of Exercise 2: Factorial Function with Closure\n\n::: {#2c31d21e .cell execution_count=34}\n``` {.julia .cell-code}\nfunction make_factorial()\n    call_count = 0  # Variable to keep track of calls\n    return (n) -> begin\n        call_count += 1\n        result = 1\n        for i in 1:n\n            result *= i\n        end\n        return (result, call_count)\n    end\nend\n\nfactorial_closure = make_factorial()\nresult, count = factorial_closure(5)\nprintln(result)  # Outputs: 120\nresult, count = factorial_closure(3)\nprintln(result)  # Outputs: 6\nprintln(\"Function called \", count, \" times\")  # Outputs: 2 times\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n120\n6\nFunction called 2 times\n```\n:::\n:::\n\n\n:::\n\n### Exercise 3: Filter Even Numbers\nWrite a function `filter_even` that takes an array of integers as input and returns a new array containing only the even numbers from the input array. Use a loop and a conditional statement to check each number.\n\nAdditionally, implement a helper function `is_even` that checks if a number is even. Use the `filter_even` function to filter an array of numbers, and print the result.\n\n**Example Output:**\n```julia\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_even(numbers)\nprintln(even_numbers)  # Outputs: [2, 4, 6, 8, 10]\n```\n\n::: {.callout-tip collapse=\"true\" icon=false}\n## Hint for Exercise 3: Filter Even Numbers\nTo add elements to an array in Julia, use the `push!` function. This function takes two arguments: the array you want to modify and the element to add to that array.\n:::\n\n::: {.callout-caution collapse=\"true\" icon=false}\n## Correction of Exercise 3: Filter Even Numbers\n\n::: {#0935d34d .cell execution_count=35}\n``` {.julia .cell-code}\nfunction is_even(x)\n    return x % 2 == 0\nend\n\nfunction filter_even(numbers)\n    even_numbers = []\n    for number in numbers\n        if is_even(number)\n            push!(even_numbers, number)\n        end\n    end\n    return even_numbers\nend\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_even(numbers)\nprintln(even_numbers)  # Outputs: [2, 4, 6, 8, 10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAny[2, 4, 6, 8, 10]\n```\n:::\n:::\n\n\n:::\n\n### Exercise Instructions\n1. For each exercise, implement the required functions in a new Julia script or interactive session.\n2. Test your functions with different inputs to ensure they work as expected.\n3. Comment on your code to explain the logic behind each part, especially where you utilize control flow and scope.\n\n",
    "supporting": [
      "syntax_files"
    ],
    "filters": [],
    "includes": {}
  }
}