---
title: "Executing Julia code"
page-layout: article
jupyter: julia-1.11
---

```{julia}
#| echo: false
using Pkg
using Suppressor
@suppress begin
  Pkg.activate(".")
end
nothing
```

This part is partially inspired from the post [Writing your code](https://modernjuliaworkflows.org/writing/) of the website 
[Modern Julia Workflows](https://modernjuliaworkflows.org), where you can find tips to make the coding experience more 
pleasant and efficient.

## Getting help

Before you write any line of code, it's good to know where to find help.
The official [help page](https://julialang.org/about/help/) is a good place to start.
In particular, the Julia [community](https://julialang.org/community/) is always happy to guide beginners.

As a rule of thumb, the [Discourse forum](https://discourse.julialang.org/) is where you should ask your questions to make the answers discoverable for future users.
If you just want to chat with someone, you have a choice between the open source [Zulip](https://julialang.zulipchat.com/register/) and the closed source [Slack](https://julialang.org/slack/).
Some of the vocabulary used by community members may appear unfamiliar, but don't worry: [StartHere.jl](https://github.com/JuliaCommunity/StartHere.jl) gives you a good overview.

## Installation

Julia can be easily downloaded and installed. See the [download page](https://julialang.org/downloads/) where we can find the following.

::: {.panel-tabset}

### Mac / Linux

Install the latest Julia version by running this in your terminal:

``` {.bash}
curl -fsSL https://install.julialang.org | sh
```

### Windows

Install the latest Julia version from the [Microsoft Store](https://www.microsoft.com/store/apps/9NJNWW8PVKMN) by running this in the command prompt:

``` {.bash}
winget install julia -s msstore
```
:::

There are different ways to write and execute some Julia code:

- within a `.ipynb` file, that is a Jupyter notebook;
- directly into the Julia REPL;
- from a script file `.jl`, either in the REPL or in the terminal;
- ...

## Jupyter notebooks

You can write some Julia code inside a [Jupyter notebook](https://jupyter.org) and execute the code. 
To use it with Julia, you will need to install the [IJulia.jl](https://github.com/JuliaLang/IJulia.jl) backend.
Then, if you have also [installed Jupyter](https://jupyter.org/install) with `pip install jupyterlab`, you can run this command to launch the server:

```bash
jupyter lab
```

If you only have IJulia.jl on your system, you can run this:

```julia
using IJulia
IJulia.notebook()
```

::: {.callout-tip}
Jupyter notebooks can be opened, modified and run directly from VS Code.
Thanks to the Julia extension, you don't even need to install IJulia.jl or Jupyter first.
:::

Try to execute the code of [example.ipynb](data/introduction/example.ipynb). You can dowload it clicking on the following image.

<a href="data/introduction/example.ipynb" download>
  <img src="../assets/images/jupyter-file.png" width="50">
</a>

## REPL

Julia comes with a full-featured interactive [command-line REPL](https://docs.julialang.org/en/v1/stdlib/REPL/) (read-eval-print loop) built into
the `julia` executable. In addition to allowing quick and easy evaluation of Julia statements,
it has a searchable history, tab-completion, many helpful keybindings, and dedicated help and
shell modes. The REPL can be started by simply calling `julia` with no arguments or double-clicking
on the executable:

```{julia}
#| echo: false
using REPL
io = IOBuffer()
REPL.banner(io)
banner = String(take!(io))
import Markdown
Markdown.parse("```julia\n\$ julia\n\n$(banner)\njulia>\n```")
```

After Julia is launched you can start computing.

```{julia}
1+1
```

Or print some text.

```{julia}
print("Hello!")
```

::: {.callout-important icon=false}
The Julia REPL has different prompt modes that can be very useful to install / remove packages, run shell commands, search for help, etc.
The different modes are:

- The Julian mode
- Help mode
- Package mode
- Shell mode

Visit the [command-line REPL page](https://docs.julialang.org/en/v1/stdlib/REPL/) for more details.
:::

::: {.panel-tabset}

### Help mode

By pressing `?` you can obtain information and metadata about Julia objects (functions, types, etc.) or unicode symbols.
The query fetches the docstring of the object, which explains how to use it.

```julia
help?> println
```

If you don't know the exact name you are looking for, type a word surrounded by quotes to see in which docstrings it pops up.
To come back to Julia mode, hit backspace.

### Package mode

By pressing `]` you access [Pkg.jl](https://github.com/JuliaLang/Pkg.jl), Julia's integrated package manager.
Please visit the [documentation](https://pkgdocs.julialang.org/v1/getting-started/) for details.
Pkg.jl allows you to:

* `]activate` different local, shared or temporary environments;
* `]instantiate` them by downloading the necessary packages;
* `]add`, `]update` (or `]up`) and `]remove` (or `]rm`) packages;
* get the `]status` (or `]st`) of your current environment.

As an illustration, we download the package Plots.jl inside our current environment:

```julia
pkg> add Plots
```

Note that you can do the same in Julia mode:

```julia
julia> using Pkg
julia> Pkg.rm("Plots")
```

The package mode itself also has a help mode, accessed with `?`.
To come back to Julia mode, hit backspace.

### Shell mode

By pressing `;` you enter a terminal, where you can execute any command you want.
Here's an example for Unix systems:

```julia
shell> pwd
```

To come back to Julia mode, hit backspace.

:::

## Julia scripts

```{julia}
#| echo: false
cp("data/introduction/example.jl", "example.jl", force=true)
nothing
```

You can also write some code in a `.jl` script.

```{julia}
#| echo: false
io = IOBuffer()
disp(f) = for line in readlines(open(f)); println(io, line); end
disp("example.jl")
file_content = String(take!(io))
import Markdown
Markdown.parse("```julia\n\$ cat example.jl\n\n$(file_content)\n```")
```

and execute the code either in the REPL:

```{julia}
include("example.jl")
```

or in a terminal with the command `$ julia example.jl`.

```{julia}
#| echo: false
rm("example.jl")
nothing
```

Try to execute the code of [example.jl](data/introduction/example.jl). You can dowload it clicking on the following image.

<a href="data/introduction/example.jl" download>
  <img src="../assets/images/julia-file.png" width="50">
</a>