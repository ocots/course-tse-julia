{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "58e35785",
   "metadata": {},
   "source": [
    "---\n",
    "title: \"Julia ecosystem\"\n",
    "page-layout: article\n",
    "jupyter: julia-1.11\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1381b23d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#| echo: false\n",
    "using Pkg\n",
    "using Suppressor\n",
    "@suppress begin\n",
    "  Pkg.activate(\".\")\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fede056",
   "metadata": {},
   "source": [
    "## A brief presentation\n",
    "\n",
    "<img height=\"150px\" style=\"margin-left:0px; float: right;\" src=\"../assets/images/logo-julia.png\"/>\n",
    "\n",
    "The work on Julia began in 2009 when [Jeff Bezanson](https://en.wikipedia.org/wiki/Jeff_Bezanson_(programmer)), [Stefan Karpinski](https://karpinski.org), [Alan Edelman](https://math.mit.edu/~edelman/) and [Viral B. Shah](https://en.wikipedia.org/wiki/Viral_B._Shah) set out to create a free language that was both high-level and fast. The first public appearance is in 2012. Julia's syntax is now considered stable, since version 1.0 in 2018.\n",
    "Julia is a high-level, general-purpose dynamic programming language, still designed to be fast and productive, for e.g. data science, artificial intelligence, machine learning, modeling and simulation, most commonly used for numerical analysis and computational science.\n",
    "See the [Julia Wikipedia page](https://en.wikipedia.org/wiki/Julia_(programming_language)) for more details.\n",
    "\n",
    "On the [Julia official webpage](https://julialang.org) one can find the following summary of Julia possibilities.\n",
    "\n",
    "::: {.panel-tabset}\n",
    "### Visualization\n",
    "\n",
    "<!-- haut | droit | bas | gauche -->\n",
    "<img height=\"220px\" style=\"float: left; margin: 0px 1em 1em auto;\" src=\"images/waves.gif\"/>\n",
    "\n",
    "#### Data Visualization and Plotting\n",
    "\n",
    "Data visualization has a complicated history. Plotting software makes trade-offs between features and simplicity, speed and beauty, and a static and dynamic interface. Some packages make a display and never change it, while others make updates in real-time.\n",
    "\n",
    "[Plots.jl](https://github.com/JuliaPlots/Plots.jl) is a visualization interface and toolset. It provides a common API across various [backends](https://docs.juliaplots.org/latest/backends/), like [GR.jl](https://github.com/jheinen/GR.jl), [PyPlot.jl](https://github.com/JuliaPy/PyPlot.jl), and [PlotlyJS.jl](https://github.com/JuliaPlots/PlotlyJS.jl). [Makie.jl](https://github.com/MakieOrg/Makie.jl) is a sophisticated package for complex graphics and animations. Users who are used to \"grammar of graphics\" plotting APIs should take a look at [Gadfly.jl](https://github.com/GiovineItalia/Gadfly.jl). [VegaLite.jl](https://github.com/queryverse/VegaLite.jl) provides the [Vega-Lite](https://vega.github.io/vega-lite/) grammar of interactive graphics interface as a Julia package. For those who do not wish to leave the comfort of the terminal, there is also [UnicodePlots.jl](https://github.com/Evizero/UnicodePlots.jl).\n",
    "\n",
    "### General\n",
    "\n",
    "<img height=\"220px\" style=\"float: left; margin: 0px 1em 1em auto;\" src=\"images/minesweeper.png\"/>\n",
    "\n",
    "#### Build, Deploy or Embed Your Code\n",
    "\n",
    "Julia makes it possible to build complete applications. Write web UIs with [Dash.jl](https://github.com/plotly/Dash.jl) and [Genie.jl](https://github.com/GenieFramework/Genie.jl) or native UIs with [Gtk4.jl](https://github.com/JuliaGtk/Gtk4.jl). Pull data from [a variety of databases](https://juliadatabases.org/). Build shared libraries and executables with [PackageCompiler](https://github.com/JuliaLang/PackageCompiler.jl). Deploy on a webserver with [HTTP.jl](https://github.com/JuliaWeb/HTTP.jl) or embedded devices. Powerful shell integration make it easy to [managing other processes](https://docs.julialang.org/en/v1/manual/running-external-programs/).\n",
    "\n",
    "Julia has foreign function interfaces for [C, Fortran](https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/), [C++](https://github.com/JuliaInterop/CxxWrap.jl), [Python](https://github.com/JuliaPy/PythonCall.jl), [R](https://github.com/JuliaInterop/RCall.jl), [Java](https://github.com/JuliaInterop/JavaCall.jl), [Mathematica](https://github.com/JuliaInterop/MathLink.jl), [Matlab](https://github.com/JuliaInterop/MATLAB.jl), and many other languages. Julia can also be embedded in other programs through its [embedding API](https://docs.julialang.org/en/v1/manual/embedding/). Julia's [PackageCompiler](https://github.com/JuliaLang/PackageCompiler.jl) makes it possible to build binaries from Julia programs that can be integrated into larger projects. Python programs can call Julia using [juliacall](https://github.com/JuliaPy/PythonCall.jl). R programs can do the same with [R's JuliaCall](https://cran.r-project.org/web/packages/JuliaCall/index.html), which is demonstrated by [calling MixedModels.jl from R](https://rpubs.com/dmbates/377897). Mathematica supports [calling Julia through its External Evaluation System](https://reference.wolfram.com/language/ref/externalevaluationsystem/Julia.html).\n",
    "\n",
    "### Data Science\n",
    "\n",
    "<img height=\"220px\" style=\"float: left; margin: 0px 1em 1em auto;\" src=\"images/onlinestats.gif\"/>\n",
    "\n",
    "#### Interact with your Data\n",
    "\n",
    "The Julia data ecosystem provides [DataFrames.jl](https://github.com/JuliaData/DataFrames.jl) to work with datasets, and perform common data manipulations. [CSV.jl](https://github.com/JuliaData/CSV.jl) is a fast multi-threaded package to read CSV files and integration with the Arrow ecosystem is in the works with [Arrow.jl](https://github.com/JuliaData/Arrow.jl). Online computations on streaming data can be performed with [OnlineStats.jl](https://github.com/joshday/OnlineStats.jl). The [Queryverse](https://www.queryverse.org/) provides query, file IO and visualization functionality. In addition to working with tabular data, the [JuliaGraphs](https://juliagraphs.org/) packages make it easy to work with combinatorial data.\n",
    "\n",
    "Julia can work with almost all databases using [JDBC.jl](https://github.com/JuliaDatabases/JDBC.jl) and [ODBC.jl](https://github.com/JuliaDatabases/ODBC.jl) drivers. In addition, it also integrates with the Spark ecosystem through [Spark.jl](https://github.com/dfdx/Spark.jl).\n",
    "\n",
    "### Machine Learning\n",
    "\n",
    "<img height=\"220px\" style=\"float: left; margin: 0px 1em 1em auto;\" src=\"images/cartpole.gif\"/>\n",
    "\n",
    "#### Scalable Machine Learning\n",
    "\n",
    "The [MLJ.jl](https://github.com/JuliaAI/MLJ.jl) package provides a unified interface to common machine learning algorithms, which include [generalized linear models](https://github.com/JuliaStats/GLM.jl), [decision trees](https://github.com/dmlc/XGBoost.jl), and [clustering](https://github.com/JuliaStats/Clustering.jl). [Flux.jl](https://github.com/FluxML/Flux.jl) and [Lux.jl](https://github.com/LuxDL/Lux.jl) are powerful packages for Deep Learning. Packages such as [Metalhead.jl](https://github.com/FluxML/Metalhead.jl), [ObjectDetector.jl](https://github.com/r3tex/ObjectDetector.jl), and [TextAnalysis.jl](https://github.com/JuliaText/TextAnalysis.jl) provide ready to use pre-trained models for common tasks. [AlphaZero.jl](https://github.com/jonathan-laurent/AlphaZero.jl) provides a high performance implementation of the reinforcement learning algorithms from AlphaZero. [Turing.jl](https://turinglang.org/) is a best in class package for probabilistic programming.\n",
    "\n",
    "### Scientific Domains\n",
    "\n",
    "<img height=\"220px\" style=\"float: left; margin: 0px 1em 1em auto;\" src=\"images/lorenz.gif\"/>\n",
    "\n",
    "#### Rich Ecosystem for Scientific Computing\n",
    "\n",
    "Julia is designed from the ground up to be very good at numerical and scientific computing. This can be seen in the abundance of scientific tooling written in Julia, such as the state-of-the-art differential equations ecosystem [(DifferentialEquations.jl)](https://github.com/SciML/DifferentialEquations.jl), optimization tools ([JuMP.jl](https://github.com/jump-dev/JuMP.jl) and [Optim.jl](https://github.com/JuliaNLSolvers/Optim.jl)), iterative linear solvers [(IterativeSolvers.jl)](https://github.com/JuliaMath/IterativeSolvers.jl), Fast Fourier transforms [(AbstractFFTs.jl)](https://github.com/JuliaMath/AbstractFFTs.jl), and much more. General purpose simulation frameworks are available for [Scientific Machine Learning](https://sciml.ai/), [Quantum computing](https://github.com/QuantumBFS/Yao.jl) and much more.\n",
    "\n",
    "Julia also offers a number of domain-specific ecosystems, such as in biology [(BioJulia)](https://github.com/BioJulia), operations research [(JuMP Dev)](https://jump.dev/), image processing [(JuliaImages)](https://juliaimages.github.io/latest/), quantum physics [(QuantumBFS)](https://github.com/QuantumBFS), nonlinear dynamics [(JuliaDynamics)](https://github.com/JuliaDynamics), quantitative economics [(QuantEcon)](https://github.com/QuantEcon), astronomy [(JuliaAstro)](https://juliaastro.github.io/) and ecology [(EcoJulia)](https://github.com/EcoJulia). With a set of highly enthusiastic developers and maintainers, the scientific ecosystem in Julia continues to grow rapidly.\n",
    "\n",
    "### Parallel Computing\n",
    "\n",
    "<img height=\"220px\" style=\"float: left; margin: 0px 1em 1em auto;\" src=\"images/parallel-prefix.png\"/>\n",
    "\n",
    "#### Parallel and Heterogeneous Computing\n",
    "\n",
    "Julia is designed for parallelism, and provides built-in primitives for parallel computing at every level: [instruction level parallelism](https://github.com/chriselrod/LoopVectorization.jl), [multi-threading](https://docs.julialang.org/en/v1/manual/multi-threading/), [GPU computing](https://juliagpu.org/), and [distributed computing](https://docs.julialang.org/en/v1/manual/distributed-computing/). The [Celeste.jl](https://github.com/jeff-regier/Celeste.jl) project [achieved 1.5 PetaFLOP/s](https://arxiv.org/pdf/1801.10277.pdf \"PDF paper on Cataloging the Visible Universe through Bayesian Inference at Petascale hosted on arxiv.org\") on the [Cori supercomputer at NERSC](https://cs.lbl.gov/news-media/news/2016/celeste-enhancements-create-new-opportunities-in-sky-surveys/) using 650,000 cores.\n",
    "\n",
    "The Julia compiler can also generate native code for [GPUs](https://juliagpu.org/). Packages such as [DistributedArrays.jl](https://github.com/JuliaParallel/DistributedArrays.jl) and [Dagger.jl](https://github.com/JuliaParallel/Dagger.jl) provide higher levels of abstraction for parallelism. Distributed Linear Algebra is provided by packages like [Elemental.jl](https://github.com/JuliaParallel/Elemental.jl) and [TSVD.jl](https://github.com/JuliaLinearAlgebra/TSVD.jl). MPI style parallelism is also available through [MPI.jl](https://github.com/JuliaParallel/MPI.jl).\n",
    "\n",
    ":::\n",
    "\n",
    "## JuliaHub\n",
    "\n",
    "Julia is a modern language and comes with cloud computing and more, see the [JuliaHub webpage](https://juliahub.com) and the [JuliaHub help page](https://help.juliahub.com/juliahub/stable/).\n",
    "\n",
    "> **The Modern Platform for Technical Computing.**\n",
    "> A single place for modeling, simulation, and user built applications with the Julia language. Designed with access to CPUs and GPUs for multi-threading, parallel and distributed computing, JuliaHub's supercomputing infrastructure allows teams to model breakthrough science and technology.\n",
    "\n",
    "With JuliaHub, comes [JuliaSim](https://juliahub.com/products/juliasim).\n",
    "\n",
    ">JuliaSim is the next-generation, cloud-based platform for model-based design. Using modern scientific machine learning (SciML) techniques and equation-based digital twin modeling and simulation, JuliaSim accelerates simulation times, significantly reducing workflow runtime from months to hours. JuliaSim encompasses block diagrams, acausal modeling, state transition diagram and a differentiable programming language all within a single environment.\n",
    "\n",
    "## JuliaCon\n",
    "\n",
    "The Julia programming language has its own conference, see the [JuliaCon 2024](https://juliacon.org/2024/).\n",
    "\n",
    "> Welcome to JuliaCon 2024, the premier annual conference for the Julia programming language community! This exciting event brings together developers, researchers, and enthusiasts from around the globe to celebrate and explore the power and versatility of Julia.\n",
    "\n",
    "<img class=\"do-not-accept-dark-mode centering\" width=\"80%\" src=\"images/juliacon-2023.jpg\" />\n",
    "\n",
    "## Editors and Ides\n",
    "\n",
    "I recommend to use [Visual Studio Code](https://code.visualstudio.com). To use Julia in Visual Studio Code, please follow\n",
    "these [steps](https://code.visualstudio.com/docs/languages/julia), where you can find how to install Julia, VS Code and \n",
    "the necessary extensions. Please visit the [Julia Visual Studio Code Documentation](https://www.julia-vscode.org/docs).\n",
    "\n",
    "::: {.panel-tabset}\n",
    "### VS Code\n",
    "\n",
    "<a href=\"https://www.julia-vscode.org/\" target=\"_blank\">\n",
    "  <img src=\"../assets/images/vscode.png\" height=\"85\" width=\"85\" alt=\"VSCode Logo\" style=\"float: left; margin: 0px 1em 1em auto;\">\n",
    "</a>\n",
    "\n",
    "Julia for Visual Studio Code is a powerful, free IDE for the Julia language. Visual Studio Code is a powerful and customizable editor. With a completely live environment, Julia for VS Code aims to take the frustration and guesswork out of programming and put the fun back in.  We build on Julia’s unique combination of ease-of-use and performance. Beginners and experts can build better software more quickly, and get to a result faster. Julia is an officially supported language on the VS Code documentation.\n",
    "\n",
    "### Jupyter\n",
    "\n",
    "<a href=\"https://jupyter.org\" target=\"_blank\">\n",
    "  <img src=\"../assets/images/logo-jupyter.svg\" height=\"85\" width=\"85\" alt=\"Jupyter Logo\" style=\"float: left; margin: 0px 1em 1em auto;\">\n",
    "</a>\n",
    "\n",
    "You can write Jupyter notebooks and use the [Jupyter](https://jupyter.org) interactive environment. To do so you need to install\n",
    "the [IJulia.jl](https://github.com/JuliaLang/IJulia.jl) package. IJulia is a [Julia-language](http://julialang.org/) backend\n",
    "combined with the [Jupyter](http://jupyter.org/) interactive environment (also used by [IPython](http://ipython.org/)).  This \n",
    "combination allows you to interact with the Julia language using Jupyter/IPython's powerful \n",
    "[graphical notebook](http://ipython.org/notebook.html), which combines code, formatted text, math, and multimedia in a single \n",
    "document. IJulia is a Jupyter language kernel and works with a variety of notebook user interfaces. In addition to the classic \n",
    "Jupyter Notebook, IJulia also works with [JupyterLab](https://jupyterlab.readthedocs.io/en/stable/), a Jupyter-based\n",
    "integrated development environment for notebooks and code. The [nteract notebook desktop](https://nteract.io/) supports IJulia with \n",
    "detailed instructions for its [installation with nteract](https://nteract.io/kernels/julia). Please visit this \n",
    "[webpage](https://www.jousefmurad.com/coding/install-julia-jupyter-notebook/) to get a tutorial on how to use Julia in \n",
    "Jupyter notebook.\n",
    "\n",
    "### Pluto.jl\n",
    "\n",
    "<a href=\"https://plutojl.org/\" target=\"_blank\">\n",
    "  <img src=\"../assets/images/pluto_jl.svg\" height=\"85\" width=\"85\" alt=\"Pluto.jl Logo\">\n",
    "</a>\n",
    "<a class=\"link extra-link\" href=\"https://plutojl.org/\" target=\"_blank\">Simple reactive notebooks</a>\n",
    "\n",
    "### Vim\n",
    "\n",
    "<a href=\"https://github.com/JuliaEditorSupport/julia-vim\" target=\"_blank\">\n",
    "  <img src=\"../assets/images/vim.png\" height=\"85\" width=\"85\" alt=\"Vim Logo\" style=\"margin: 0px 1em 0em auto;\">\n",
    "</a>\n",
    "<a class=\"link extra-link\" href=\"https://github.com/JuliaEditorSupport/julia-vim\" target=\"_blank\">Vim plugin</a>\n",
    "\n",
    "### Emacs\n",
    "\n",
    "<a href=\"https://github.com/JuliaEditorSupport/julia-emacs\" target=\"_blank\">\n",
    "  <img src=\"../assets/images/emacs.png\" height=\"85\" width=\"85\" alt=\"Emacs Logo\" style=\"margin: 0px 1em 0em auto;\">\n",
    "</a>\n",
    "<a class=\"link extra-link\" href=\"https://github.com/JuliaEditorSupport/julia-emacs\" target=\"_blank\">Emacs plugin</a>\n",
    "\n",
    "::: \n",
    "\n",
    "## Documentation\n",
    "\n",
    "In the [Julia documentation](https://docs.julialang.org/en/v1/), you may find:\n",
    "\n",
    "- some important Links that can be useful to learn and use the Julia programming language,\n",
    "- a comparison to other languages,\n",
    "- a list of advantages of using Julia,\n",
    "\n",
    "but also:\n",
    "\n",
    "- manuals;\n",
    "- base documentation;\n",
    "- standard librairies documentation;\n",
    "- developer documentation.\n",
    "\n",
    "::: {.callout-note}\n",
    "In Julia, it is quite common to have the documentation in the form of manuals or tutorials. See [Getting Started with Differential Equations in Julia](https://docs.sciml.ai/DiffEqDocs/stable/getting_started/#ode_example) for instance.\n",
    ":::\n",
    "\n",
    "**Example.** Search how to compute the norm of a vector.\n",
    "\n",
    "<img width=\"100%\" src=\"images/doc-norm-1.png\"/>\n",
    "\n",
    "The `norm` function comes from the standard librairy `LinearAlgebra`.\n",
    "\n",
    "<img width=\"100%\" src=\"images/doc-norm-2.png\"/>\n",
    "\n",
    "However, we are not directly at the right place, so I recommend to use the `Search docs` field.\n",
    "\n",
    "<img width=\"100%\" src=\"images/doc-norm-3.png\"/>\n",
    "\n",
    "And now, we have the documentation.\n",
    "\n",
    "<img width=\"100%\" src=\"images/doc-norm-4.png\"/>\n",
    "\n",
    "::: {.callout-note}\n",
    "It is also possible to use the help mode:\n",
    "\n",
    "```julia\n",
    "using LinearAlgebra\n",
    "?norm\n",
    "```\n",
    ":::"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.11.1",
   "language": "julia",
   "name": "julia-1.11",
   "path": "/Users/ocots/Library/Jupyter/kernels/julia-1.11"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.11.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
