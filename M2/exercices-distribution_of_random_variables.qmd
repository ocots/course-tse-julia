---
title: "Distributions of random variables"
page-layout: article
jupyter: julia-1.11
---

```{julia}
#| echo: false
using Pkg
using Suppressor
@suppress begin
  Pkg.activate(".")
end
```

## Preliminaries

For the exercices of this page, you need to add the packages [Distributions.jl](https://juliastats.org/Distributions.jl), [LaTeXStrings.jl](https://github.com/JuliaStrings/LaTeXStrings.jl), [Plots.jl](https://docs.juliaplots.org) and [Test.jl](https://docs.julialang.org/en/v1/stdlib/Test/). To install them please <a href="https://docs.julialang.org/en/v1/manual/getting-started/">open Julia's interactive session (known as REPL)</a> and press <kbd>]</kbd> key in the REPL to use the package mode, then add the packages:

```julia
julia> ]
pkg> add Distributions
pkg> add LaTeXStrings
pkg> add Plots
pkg> add Test
```

When the installation is complete, import them:

```{julia}
using Distributions
using LaTeXStrings # just for labels in some plots
using Plots
using Test
```

The package `Test.jl` is used to test if the outputs of functions to complete are correct. The packages `Plots.jl` is for data visualization. Almost everything in Plots is done by specifying plot [attributes](https://docs.juliaplots.org/stable/attributes/#attributes). Do not hesitate to have a look to this [tutorial](https://docs.juliaplots.org/stable/tutorial/). Finally, the package `Distributions.jl` provides a large collection of probabilistic distributions and related functions.

## Empirical distribution function

### Exercise 1

1. Build the empirical cumulative distribution function, also called eCDF. 

::: {.callout-note}
Use [broadcasting](https://docs.julialang.org/en/v1/manual/arrays/#Broadcasting) to complete the following code.

```{julia}
a = [1,2,3.5]
a .< 2
```
:::


```{julia}
"""
   Compute de number of element in the vactor t less than a value x
   input
   t : Vector of Real
   x : Real
   Output
   Integer
"""
function empirique(t::Vector{<:Real}, x::Real)::Int
    # to complete
    return sum(t .< x)  # .< vectorial operation
end


println("empirique([1.,2,3],1.5) = ", empirique([1.,2,3],1.5))

Test.@test empirique([1.,2,3],1.5) == 1
```

```{julia}
#| error: true
# If the type of the vector elements is not a real then there is an error
println("empirique([1.+2im,2,3],1.5) = ", empirique([1.,2+2im,3],1.5))
```

2. Generate a sample of N=1000 datas from a uniform distribution on [0,2] and plot the eCDF of this sample.

```{julia}
N = 1000 # number of datas
u = 2*rand(N)   # uniform law on [0,2]
x_grid = -1:0.1:3

# Plot of the empirical cumulative distribution function
F(x) = empirique(u,x)/N
p_uniform_cdf = plot(x_grid,F,xlabel="x", ylabel="F(x)", legend=false)
```

3. Add on the plot the eCDF with the `Distribution.jl` package.

## Distributions.jl Package

### Introduction

There is lots of libraries (packages in `julia`): [https://julialang.org/packages/](https://julialang.org/packages/). For the documentation of the Distributions Package see [https://juliastats.org/Distributions.jl/stable/](https://juliastats.org/Distributions.jl/stable/).

```{julia}
a = 0; b = 2;
dist = Uniform(a,b)  # dist is an object : the uniform distribution on [a,b]
println("type de dist = ",typeof(dist))
# you can acces to the mean or median of the distribution
println("mean(dist) = ", mean(dist))
println("median(dist) = ", median(dist))
# and the the PDF, CDF and inverse CDF function of the distribution
println("pdf(1.2) = ", pdf(dist,1.2))
println("pdf(3) = ", pdf(dist,3))
println("cdf(1.2) = ", cdf(dist,1.2))
println("cdf(3) = ", cdf(dist,3))
println("inverse of cdf(0.75) = ", quantile(dist,0.75))
```

### Exercise 2

Plot on the same first graph the CFD of the uniform distribution on [0,2]

```{julia}
cdf_uniform(x) = cdf(dist,x)
plot!(p_uniform_cdf,x_grid,cdf_uniform,xlabel="x", ylabel="F(x)", legend=false)
```

## Triangular Distribution

We consider the distribution with the following density distribution

$$f(x) = \begin{cases}
x\quad\textrm{pour}\quad x\in[0,1]\\
2-x\quad\textrm{pour}\quad x\in[1,2]\\
0\quad\textrm{sinon}
\end{cases}$$

Plot the density, cumulative dendity and inverse cumulative function.

```{julia}
a = 0; b = 2;
dist = TriangularDist(a,b,1)  # min = a; max = b; mode = 1
println("type de dist = ",typeof(dist))
println("params(dist) = ", params(dist))

# Density function
p1 = plot(x_grid, x->pdf(dist,x), color = :blue, linewidth=2, xlabel=(L"x"), ylabel=(L"f(x)")) 
# Cumulative density function
p2 = plot(a-1:0.01:b+1, x->cdf(dist,x), linewidth=2, xlabel=(L"x"), ylabel=(L"F(x)"))  
# Inverse cumulative density function
p3 = plot(0:0.01:1, x->quantile(dist,x), xlims=(0,1), ylims=(0,2), color = :green, linewidth=2, xlabel=(L"u"), ylabel=(L"F^{-1}(u)"))
plot(p1,p2,p3, layout=(1,3),legend = false,size = (1200,300), margin = 0.6Plots.cm)
```

### Histogram

Generate a sample of 100 datas from the triangular distribution and plot on the same graph the histogram of the simple and the PDF function

```{julia}
# Sample of 100 datas
t = rand(dist,100)
histogram(t) 
histogram(t,normalize=true) # normalize=true pour ajouter la fonction de densité
plot!(a-0.5:0.1:b+0.5, x->pdf.(dist,x), linewidth=2, xlabel=(L"x"), ylabel=(L"f(x)"))   
```

### Question

What is the problem ?

1. Use the normalize=true parameter in the histogram function for solving the problem
2. Execute for a sample of N = 10000 datas

## Example of discret distribution

We present here the binomial distribution which is a discrete probability distribution.

```{julia}
n, p, N = 10, 0.2, 10^3
bDist = Binomial(n,p)
xgrid = 0:n
plot(xgrid,pdf.(bDist,xgrid), color=:orange, seriestype = :scatter)
plot!(xgrid,pdf.(bDist,xgrid), line = :stem, linewidth=2, color=:orange)
```

## Central limit theorem

We are going to illustrate the central limit theorem : 

Suppose $X_1,X_2,\ldots$ is a sequence of Independent and identically distributed random variables with $E(X_i)=\mu$ and $Var(X_i)=\sigma^2 < +\infty$. Then, as $n$ approaches infinity, the random variables $\sqrt{n}(\bar{X}_n - \mu)$ converge in distribution to a normal distribution $\mathcal{N}(0,\sigma^2)$


### Exercise

1. Choose a distribution law dist, compute its mean $\mu$ and its variance $\sigma^2$ and $N$ the number of sanple
2. For $n$ in (1,2,5,20)
    1. Generate N=10000 samples of lenght n from the dist distribution
    2. Compute the means of the $N$ samples and the $N$ values $\sqrt{n}(\bar{X}_n - \mu)$
    3. Plot the histogram of these $N$ values and the normal distribution $\mathcal{N}(0,\sigma^2)$

```{julia}
X = rand(dist,(2,3))
println(X)
(mean(X,dims=1))
```

```{julia}
dist = Uniform(0,12)
μ = mean(dist)
σ = std(dist)
normal_dist = Normal(0,σ)
println(L"\mu = ", μ)
println(L"\sigma = ", σ)
N = 10000
n_mean = (1,2,5,20)

p = []
for n in n_mean 
    X = rand(dist,(n,N))
    Xbar_n = vec(sqrt(n)*(mean(X,dims=1) .- μ)) # to have a vector and not a matrix of size (1,3)
    
    p1 = histogram(Xbar_n,normalize=true) # normalize=true pour ajouter la fonction de densité
    plot!(p1, -3*σ:0.1:3*σ, x->pdf.(normal_dist,x), linewidth=2, xlabel=(L"x"), ylabel=(L"f(x)"))   
    push!(p,p1)
end
println(p)
plot(p[1],p[2],p[3],p[4],legend = false)
```