---
title-block-banner: true
title: "Introduction to Julia ecosystem"
subtitle: "Application to Simple Linear Regression"
author: "Olivier Cots"
date: last-modified
jupyter: julia-1.11
---

## Julia ecosystem

[Wikipedia citation](https://en.wikipedia.org/wiki/Julia_(programming_language)):

>Julia is a high-level, general-purpose dynamic programming language, still designed to be fast and productive, for e.g. data science, artificial intelligence, machine learning, modeling and simulation, most commonly used for numerical analysis and computational science.

<img height="100px" style="margin-left:20px; float: right;" src="assets/images/logo-julia.svg" />

The work on Julia began in 2009 when [Jeff Bezanson](https://en.wikipedia.org/wiki/Jeff_Bezanson_(programmer)), [Stefan Karpinski](https://karpinski.org), [Alan Edelman](https://math.mit.edu/~edelman/) and [Viral B. Shah](https://en.wikipedia.org/wiki/Viral_B._Shah) set out to create a free language that was both high-level and fast. The first public appearance is in 2012. Julia's syntax is now considered stable, since version 1.0 in 2018.

Julia can be easily downloaded and installed. See the [download page](https://julialang.org/downloads/) where we can find the following.

::: {.panel-tabset}
### Mac / Linux

Install the latest Julia version by running this in your terminal:

``` {.bash}
curl -fsSL https://install.julialang.org | sh
```

### Windows

Install the latest Julia version from the [Microsoft Store](https://www.microsoft.com/store/apps/9NJNWW8PVKMN) by running this in the command prompt:

``` {.bash}
winget install julia -s msstore
```
:::


On the [Julia official webpage](https://julialang.org) one can find the following summary of Julia ecosystem.

::: {.panel-tabset}
### Visualization

<img height="220px" style="float: left; margin-right:20px; margin-top:10px;" src="assets/images/waves.gif"/>

#### Data Visualization and Plotting

Data visualization has a complicated history. Plotting software makes trade-offs between features and simplicity, speed and beauty, and a static and dynamic interface. Some packages make a display and never change it, while others make updates in real-time.

[Plots.jl](https://github.com/JuliaPlots/Plots.jl) is a visualization interface and toolset. It provides a common API across various [backends](https://docs.juliaplots.org/latest/backends/), like [GR.jl](https://github.com/jheinen/GR.jl), [PyPlot.jl](https://github.com/JuliaPy/PyPlot.jl), and [PlotlyJS.jl](https://github.com/JuliaPlots/PlotlyJS.jl). [Makie.jl](https://github.com/MakieOrg/Makie.jl) is a sophisticated package for complex graphics and animations. Users who are used to "grammar of graphics" plotting APIs should take a look at [Gadfly.jl](https://github.com/GiovineItalia/Gadfly.jl). [VegaLite.jl](https://github.com/queryverse/VegaLite.jl) provides the [Vega-Lite](https://vega.github.io/vega-lite/) grammar of interactive graphics interface as a Julia package. For those who do not wish to leave the comfort of the terminal, there is also [UnicodePlots.jl](https://github.com/Evizero/UnicodePlots.jl).

### General

<img height="220px" style="float: left; margin-right:20px; margin-top:10px;" src="assets/images/minesweeper.png"/>

#### Build, Deploy or Embed Your Code

Julia makes it possible to build complete applications. Write web UIs with [Dash.jl](https://github.com/plotly/Dash.jl) and [Genie.jl](https://github.com/GenieFramework/Genie.jl) or native UIs with [Gtk4.jl](https://github.com/JuliaGtk/Gtk4.jl). Pull data from [a variety of databases](https://juliadatabases.org/). Build shared libraries and executables with [PackageCompiler](https://github.com/JuliaLang/PackageCompiler.jl). Deploy on a webserver with [HTTP.jl](https://github.com/JuliaWeb/HTTP.jl) or embedded devices. Powerful shell integration make it easy to [managing other processes](https://docs.julialang.org/en/v1/manual/running-external-programs/).

Julia has foreign function interfaces for [C, Fortran](https://docs.julialang.org/en/v1/manual/calling-c-and-fortran-code/), [C++](https://github.com/JuliaInterop/CxxWrap.jl), [Python](https://github.com/JuliaPy/PythonCall.jl), [R](https://github.com/JuliaInterop/RCall.jl), [Java](https://github.com/JuliaInterop/JavaCall.jl), [Mathematica](https://github.com/JuliaInterop/MathLink.jl), [Matlab](https://github.com/JuliaInterop/MATLAB.jl), and many other languages. Julia can also be embedded in other programs through its [embedding API](https://docs.julialang.org/en/v1/manual/embedding/). Julia's [PackageCompiler](https://github.com/JuliaLang/PackageCompiler.jl) makes it possible to build binaries from Julia programs that can be integrated into larger projects. Python programs can call Julia using [juliacall](https://github.com/JuliaPy/PythonCall.jl). R programs can do the same with [R's JuliaCall](https://cran.r-project.org/web/packages/JuliaCall/index.html), which is demonstrated by [calling MixedModels.jl from R](https://rpubs.com/dmbates/377897). Mathematica supports [calling Julia through its External Evaluation System](https://reference.wolfram.com/language/ref/externalevaluationsystem/Julia.html).

### Data Science

<img height="220px" style="float: left; margin-right:20px; margin-top:10px;" src="assets/images/onlinestats.gif"/>

#### Interact with your Data

The Julia data ecosystem provides [DataFrames.jl](https://github.com/JuliaData/DataFrames.jl) to work with datasets, and perform common data manipulations. [CSV.jl](https://github.com/JuliaData/CSV.jl) is a fast multi-threaded package to read CSV files and integration with the Arrow ecosystem is in the works with [Arrow.jl](https://github.com/JuliaData/Arrow.jl). Online computations on streaming data can be performed with [OnlineStats.jl](https://github.com/joshday/OnlineStats.jl). The [Queryverse](https://www.queryverse.org/) provides query, file IO and visualization functionality. In addition to working with tabular data, the [JuliaGraphs](https://juliagraphs.org/) packages make it easy to work with combinatorial data.

Julia can work with almost all databases using [JDBC.jl](https://github.com/JuliaDatabases/JDBC.jl) and [ODBC.jl](https://github.com/JuliaDatabases/ODBC.jl) drivers. In addition, it also integrates with the Spark ecosystem through [Spark.jl](https://github.com/dfdx/Spark.jl).

### ML

<img height="220px" style="float: left; margin-right:20px; margin-top:10px;" src="assets/images/cartpole.gif"/>

#### Scalable Machine Learning

The [MLJ.jl](https://github.com/JuliaAI/MLJ.jl) package provides a unified interface to common machine learning algorithms, which include [generalized linear models](https://github.com/JuliaStats/GLM.jl), [decision trees](https://github.com/dmlc/XGBoost.jl), and [clustering](https://github.com/JuliaStats/Clustering.jl). [Flux.jl](https://github.com/FluxML/Flux.jl) and [Lux.jl](https://github.com/LuxDL/Lux.jl) are powerful packages for Deep Learning. Packages such as [Metalhead.jl](https://github.com/FluxML/Metalhead.jl), [ObjectDetector.jl](https://github.com/r3tex/ObjectDetector.jl), and [TextAnalysis.jl](https://github.com/JuliaText/TextAnalysis.jl) provide ready to use pre-trained models for common tasks. [AlphaZero.jl](https://github.com/jonathan-laurent/AlphaZero.jl) provides a high performance implementation of the reinforcement learning algorithms from AlphaZero. [Turing.jl](https://turinglang.org/) is a best in class package for probabilistic programming.

### Scientific Domains

<img height="220px" style="float: left; margin-right:20px; margin-top:10px;" src="assets/images/lorenz.gif"/>

#### Rich Ecosystem for Scientific Computing

Julia is designed from the ground up to be very good at numerical and scientific computing. This can be seen in the abundance of scientific tooling written in Julia, such as the state-of-the-art differential equations ecosystem [(DifferentialEquations.jl)](https://github.com/SciML/DifferentialEquations.jl), optimization tools ([JuMP.jl](https://github.com/jump-dev/JuMP.jl) and [Optim.jl](https://github.com/JuliaNLSolvers/Optim.jl)), iterative linear solvers [(IterativeSolvers.jl)](https://github.com/JuliaMath/IterativeSolvers.jl), Fast Fourier transforms [(AbstractFFTs.jl)](https://github.com/JuliaMath/AbstractFFTs.jl), and much more. General purpose simulation frameworks are available for [Scientific Machine Learning](https://sciml.ai/), [Quantum computing](https://github.com/QuantumBFS/Yao.jl) and much more.

Julia also offers a number of domain-specific ecosystems, such as in biology [(BioJulia)](https://github.com/BioJulia), operations research [(JuMP Dev)](https://jump.dev/), image processing [(JuliaImages)](https://juliaimages.github.io/latest/), quantum physics [(QuantumBFS)](https://github.com/QuantumBFS), nonlinear dynamics [(JuliaDynamics)](https://github.com/JuliaDynamics), quantitative economics [(QuantEcon)](https://github.com/QuantEcon), astronomy [(JuliaAstro)](https://juliaastro.github.io/) and ecology [(EcoJulia)](https://github.com/EcoJulia). With a set of highly enthusiastic developers and maintainers, the scientific ecosystem in Julia continues to grow rapidly.

### Parallel

<img height="220px" style="float: left; margin-right:20px; margin-top:10px;" src="assets/images/parallel-prefix.png"/>

#### Parallel and Heterogeneous Computing

Julia is designed for parallelism, and provides built-in primitives for parallel computing at every level: [instruction level parallelism](https://github.com/chriselrod/LoopVectorization.jl), [multi-threading](https://docs.julialang.org/en/v1/manual/multi-threading/), [GPU computing](https://juliagpu.org/), and [distributed computing](https://docs.julialang.org/en/v1/manual/distributed-computing/). The [Celeste.jl](https://github.com/jeff-regier/Celeste.jl) project [achieved 1.5 PetaFLOP/s](https://arxiv.org/pdf/1801.10277.pdf "PDF paper on Cataloging the Visible Universe through Bayesian Inference at Petascale hosted on arxiv.org") on the [Cori supercomputer at NERSC](https://cs.lbl.gov/news-media/news/2016/celeste-enhancements-create-new-opportunities-in-sky-surveys/) using 650,000 cores.

The Julia compiler can also generate native code for [GPUs](https://juliagpu.org/). Packages such as [DistributedArrays.jl](https://github.com/JuliaParallel/DistributedArrays.jl) and [Dagger.jl](https://github.com/JuliaParallel/Dagger.jl) provide higher levels of abstraction for parallelism. Distributed Linear Algebra is provided by packages like [Elemental.jl](https://github.com/JuliaParallel/Elemental.jl) and [TSVD.jl](https://github.com/JuliaLinearAlgebra/TSVD.jl). MPI style parallelism is also available through [MPI.jl](https://github.com/JuliaParallel/MPI.jl).

:::

Julia is a modern language and comes with cloud computing and more, see [JuliaHub webpage](https://juliahub.com) and the [JuliaHub help page](https://help.juliahub.com/juliahub/stable/).

> **The Modern Platform for Technical Computing.**
> A single place for modeling, simulation, and user built applications with the Julia language. Designed with access to CPUs and GPUs for multi-threading, parallel and distributed computing, JuliaHub's supercomputing infrastructure allows teams to model breakthrough science and technology.

The Julia programming language has its own conference, see the [JuliaCon 2024](https://juliacon.org/2024/).

> Welcome to JuliaCon 2024, the premier annual conference for the Julia programming language community! This exciting event brings together developers, researchers, and enthusiasts from around the globe to celebrate and explore the power and versatility of Julia.

<img width="100%" src="assets/images/juliacon-2023.jpg" />

## Code execution

There are different ways to execute Julia code:

- within a `.ipynb` file, that is a Jupyter notebook;
- directly into the Julia REPL;
- from a script file `.jl`, either in the REPL or in the terminal;
- ...

### Jupyter notebooks

<img height="100px" style="margin-left:15px; margin-right:15px; float: right;" src="assets/images/logo-jupyter.svg"/>

You can write some Julia code inside a [Jupyter notebook](https://jupyter.org) and execute the code. To interact with the Julia language using Jupyter notebook, please install [IJulia.jl](https://github.com/JuliaLang/IJulia.jl).

> **IJulia** is a [Julia-language](http://julialang.org/) backend
combined with the [Jupyter](http://jupyter.org/) interactive
environment (also used by [IPython](http://ipython.org/)).  This
combination allows you to interact with the Julia language using
Jupyter/IPython's powerful [graphical
notebook](http://ipython.org/notebook.html), which combines code,
formatted text, math, and multimedia in a single document.
IJulia is a Jupyter language kernel and works with a variety of notebook
user interfaces. In addition to the classic Jupyter Notebook, IJulia
also works with [JupyterLab](https://jupyterlab.readthedocs.io/en/stable/), a Jupyter-based
integrated development environment for notebooks and code.
The [nteract notebook desktop](https://nteract.io/) supports IJulia with
detailed instructions for its [installation with nteract](https://nteract.io/kernels/julia).

Try to execute the code of [example.ipynb](data/lecture1/example.ipynb).

### The Julia REPL

Julia comes with a full-featured interactive [command-line REPL](https://docs.julialang.org/en/v1/stdlib/REPL/) (read-eval-print loop) built into
the `julia` executable. In addition to allowing quick and easy evaluation of Julia statements,
it has a searchable history, tab-completion, many helpful keybindings, and dedicated help and
shell modes. The REPL can be started by simply calling `julia` with no arguments or double-clicking
on the executable:

```{julia}
#| echo: false
using REPL
io = IOBuffer()
REPL.banner(io)
banner = String(take!(io))
import Markdown
Markdown.parse("```julia\n\$ julia\n\n$(banner)\njulia>\n```")
```

After Julia is launched you can start computing.

```{julia}
1+1
```

Or print some text.

```{julia}
print("Hello!")
```

::: {.callout-important icon=false}
The Julia REPL has different prompt modes that can be very useful to install / remove packages, run shell commands, search for help, etc.
The different modes are:

- The Julian mode
- Help mode
- Shell mode
- Pkg mode
- Search modes

Visit the [command-line REPL page](https://docs.julialang.org/en/v1/stdlib/REPL/) for more details.
:::

### Julia scripts

You can also write some code in a `.jl` script.

```{julia}
#| echo: false
io = IOBuffer()
disp(f) = for line in readlines(open(f)); println(io, line); end
disp("data/lecture1/example.jl")
file_content = String(take!(io))
import Markdown
Markdown.parse("```julia\n\$ cat data/lecture1/example.jl\n\n$(file_content)\n```")
```

and execute the code either in the REPL:

```{julia}
include("data/lecture1/example.jl")
```

or in a terminal with the command `$ julia example.jl`.

## Basic examples of code

```{julia}
x = 1
2x
```

```{julia}
x = sqrt(2)
```

```{julia}
# unicode is great
x = √(2)
```

```{julia}
😄 = sqrt(2)
2😄
```

Some functions.

```{julia}
# this is a function
function f(x)
  return 2x+1
end
```

```{julia}
# this also
f(x) = 2x+1
```

```{julia}
# this also: but f is not available anymore
g = x -> 2x^2
```

```{julia}
# be careful of the priorities
g(1)
```

```{julia}
Hello(name) = "Hello " * name * "!"
Hello("Alban")
```

```{julia}
x = [1 3 12]
println("x[2] = ", x[2])
x[2] = 5
println("x[2] = ", x[2])
```

The following function has side effects that can be dangerous.

```{julia}
function f(x, y)
    x[1] = 42      # mutates x
    y = 7 + sum(x) # new binding for y, no mutation
    return y
end

a = [4, 5, 6]
b = 3

println("f($a, $b) = ", f(a, b))
println("a = ", a, " # a[1] is changed to 42 by f")
println("b = ", b, " # not changed")
```

When a function has [side effects](https://en.wikipedia.org/wiki/Side_effect_(computer_science)), please use the `!` convention. See [Argument Passing Behavior](https://docs.julialang.org/en/v1/manual/functions/#man-argument-passing).

```{julia}
function put_at_second_place!(x, value)
  x[2] = value
  return nothing
end

x = [1 3 12]
println("x[2] = ", x[2])

put_at_second_place!(x, 5)
println("x[2] = ", x[2])

put_at_second_place!(x[1:3], 15) # be careful if you give a slice
println("x[2] = ", x[2])
```

A function may have several methods.

```{julia}
Σ(x::Float64, y::Float64) = 2x + y
```

```{julia}
Σ(2.0, 3.0)
```

```{julia}
#| error: true
Σ(2, 3.0)
```


```{julia}
h(x::Number,  y::Number ) = 2x - y
h(x::Int,     y::Int    ) = 2x * y
h(x::Float64, y::Float64) = 2x + y
```

```{julia}
println("h(2,   3.0) = ", h(2, 3.0))
println("h(2,   3  ) = ", h(2, 3))
println("h(2.0, 3.0) = ", h(2.0, 3.0))
```

## Documentation

<img height="150px" src="assets/images/logo-julia.png"/>

In the [Julia documentation](https://docs.julialang.org/en/v1/), you may find:

- some important Links;
- a comparison to other languages;
- a list of advantages of using Julia

but also:

- manuals;
- base documentation;
- standard librairies documentation;
- developer documentation.

::: {.callout-note}
In Julia, it is quite common to have the documentation in the form of manuals or tutorials. See [Getting Started with Differential Equations in Julia](https://docs.sciml.ai/DiffEqDocs/stable/getting_started/#ode_example) for instance.
:::

**Example.** Search how to compute the norm of a vector.

<img width="100%" src="assets/images/doc-norm-1.png"/>

The `norm` function comes from the standard librairy `LinearAlgebra`.

<img width="100%" src="assets/images/doc-norm-2.png"/>

However, we are not directly at the right place, so I recommend to use the `Search docs` field.

<img width="100%" src="assets/images/doc-norm-3.png"/>

And now, we have the documentation.

<img width="100%" src="assets/images/doc-norm-4.png"/>

::: {.callout-note}
It is also possible to use the help mode:

```julia
using LinearAlgebra
?norm
```
:::

## Editors and IDEs

<div class="row ides">
<div class="col-lg-3 col-md-6 ide ide-feature">
<h3-ide>VS Code</h3-ide>
<a href="https://www.julia-vscode.org/" target="_blank">
<img src="assets/images/vscode.png" height="85" width="85" alt="VSCode Logo"></a>
<h4-ide class="outer-link">
<a class="link extra-link" href="https://www.julia-vscode.org/" target="_blank">VS Code Extension</a>
</h4-ide>
</div>
<div class="col-lg-3 col-md-6 ide ide-feature">
<h3-ide>Jupyter</h3-ide>
<a href="https://github.com/JuliaLang/IJulia.jl" target="_blank">
<img src="assets/images/jupyter.svg" height="85" width="85" alt="Jupyter Logo"></a>
<h4-ide class="outer-link">
<a class="link extra-link" href="https://github.com/JuliaLang/IJulia.jl" target="_blank">Jupyter kernel</a>
</h4-ide>
</div>
<div class="col-lg-3 col-md-6 ide ide-feature">
<h3-ide>Pluto.jl</h3-ide>
<a href="https://plutojl.org/" target="_blank">
<img src="assets/images/pluto_jl.svg" height="85" width="85" alt="Pluto.jl Logo"></a>
<h4-ide class="outer-link">
<a class="link extra-link" href="https://plutojl.org/" target="_blank">Simple reactive notebooks</a>
</h4-ide>
</div>
<div class="col-lg-3 col-md-6 ide ide-feature">
<h3-ide>Vim</h3-ide>
<a href="https://github.com/JuliaEditorSupport/julia-vim" target="_blank">
<img src="assets/images/vim.png" height="85" width="85" alt="Vim Logo"></a>
<h4-ide class="outer-link">
<a class="link extra-link" href="https://github.com/JuliaEditorSupport/julia-vim" target="_blank">Vim plugin</a>
</h4-ide>
</div>
<div class="col-lg-3 col-md-6 ide ide-feature">
<h3-ide>Emacs</h3-ide>
<a href="https://github.com/JuliaEditorSupport/julia-emacs" target="_blank">
<img src="assets/images/emacs.png" height="85" width="85" alt="Emacs Logo"></a>
<h4-ide class="outer-link">
<a class="link extra-link" href="https://github.com/JuliaEditorSupport/julia-emacs" target="_blank">Emacs plugin</a>
</h4-ide>
</div>
</div>

I recommend to use [VS Code](https://www.julia-vscode.org). You can download it [here](https://code.visualstudio.com/download). See the [Julia Visual Studio Code Documentation](https://www.julia-vscode.org/docs/stable/#Julia-Visual-Studio-Code-Documentation).

> Julia for Visual Studio Code is a powerful, free IDE for the Julia language. Visual Studio Code is a powerful and customizable editor. With a completely live environment, Julia for VS Code aims to take the frustration and guesswork out of programming and put the fun back in.  We build on Julia’s unique combination of ease-of-use and performance. Beginners and experts can build better software more quickly, and get to a result faster. Julia is an officially supported language on the [VS Code docs](https://code.visualstudio.com/docs/languages/julia).

## Exercise

### Context: Least Squares Regression Line

We propose a first exercise about [simple linear regression](https://en.wikipedia.org/wiki/Simple_linear_regression). The data are excerpted from this [example](https://www.ncl.ac.uk/webtemplate/ask-assets/external/maths-resources/statistics/regression-and-correlation/simple-linear-regression.html) and saved into [data.csv](data.csv). We propose an [ordinary least squares](https://en.wikipedia.org/wiki/Ordinary_least_squares) formulation which is a type of [linear least squares](https://en.wikipedia.org/wiki/Linear_least_squares) method for choosing the unknown parameters in a linear regression model by the principle of least squares: minimizing the sum of the squares of the differences between the observed dependent variable (values of the variable being observed) in the input dataset and the output of the (linear) function of the independent variable.

<img height="350px" style="float: right;" src="assets/images/Linear_least_squares_example2.svg"/>

Given a set of $m$ data points $y_{1}$, $y_{2}$, $\dots$, $y_{m}$, consisting of experimentally measured values taken at $m$ values $x_{1}$, $x_{2}$, $\dots$, $x_{m}$ of an independent variable ($x_i$ may be scalar or vector quantities), and given a model function $y=f(x,\beta),$ with $\beta =(\beta_{1},\beta_{2},\dots ,\beta_{n})$, it is desired to find the parameters $\beta_j$ such that the model function "best" fits the data. In linear least squares, linearity is meant to be with respect to parameters $\beta_j$, so
$$
  f(x, \beta) = \sum_{j=1}^n \beta_j\, \varphi_j(x).
$$
In general, the functions $\varphi_j$ may be nonlinear. However, we consider linear regression, that is
$$
  f(x, \beta) = \beta_1 + \beta_2 x.
$$
Ideally, the model function fits the data exactly, so 
$$
  y_i = f(x_i, \beta)
$$
for all $i=1, 2, \dots, m$. This is usually not possible in practice, as there are more data points than there are parameters to be determined. The approach chosen then is to find the minimal possible value of the sum of squares of the residuals
$$
  r_i(\beta) = y_i - f(x_i, \beta), \quad i=1, 2, \dots, m
$$
so to minimize the function
$$
  S(\beta) = \sum_{i=1}^m r_i^2(\beta).
$$
In the linear least squares case, the residuals are of the form
$$
  r(\beta) = y - X\, \beta
$$
with $y = (y_i)_{1\le i\le m} \in \mathbb{R}^m$ and $X = (X_{ij})_{1\le i\le m, 1\le j\le n} \in \mathrm{M}_{mn}(\mathbb{R})$, where $X_{ij} = \varphi_j(x_i)$. Since we consider linear regression, the $i$-th row of the matrix $X$ is given by
$$
  X_{i[:]} = [1 \quad x_i].
$$
The objective function may be written
$$
  S(\beta) = {\Vert y - X\, \beta \Vert}^2
$$
where the norm is the usual $2$-norm. The solution to the linear least squares problem
$$
  \underset{\beta \in \mathbb{R}^n}{\mathrm{minimize}}\, {\Vert y - X\, \beta \Vert}^2
$$
is computed by solving the *normal equation*
$$
  X^\top X\, \beta = X^\top y,
$$
where $X^\top$ denotes the transpose of $X$.

### Questions

To answer the questions you need to import the following packages.

```{julia}
using DataFrames
using CSV
using Plots
```

You also need to download the csv file. Click on the following image.

<a href="data/lecture1/data.csv" download>
  <img src="assets/images/logo-csv-download.png" width="50">
</a>

1. Using the packages `DataFrames.jl` and `CSV.jl`, load the dataset from [data/lecture1/data.csv](data/lecture1/data.csv) and save the result into a variable named `dataset`.

```{julia}
#| code-fold: true
#| code-summary: "Show the answer"
path = "data/lecture1/data.csv" # update depending on the location of your file
dataset = DataFrame(CSV.File(path))
```

::: {.callout-note}
Do not hesitate to visit the documentation of `CSV.jl` and `DataFrames.jl`.
:::

2. Using the package `Plot.jl`, plot the data. 

::: {.callout-caution collapse="true"}
## Hint

Use `names(dataset)` to get the list of data names. If `Time` is a name you can access to the associated data by `dataset.Time`.
:::

```{julia}
#| code-fold: true
#| code-summary: "Show the answer"
plt = plot(
  dataset.Time, 
  dataset.Mass,
  seriestype=:scatter, 
  legend=false, 
  xlabel="Time", 
  ylabel="Mass"
)
```

1. Create the matrix $X$, the vector $\beta$ and solve the normal equation with the operator [`Base.\`](https://tinyurl.com/juliadoc-base-backslash).

::: {.callout-caution collapse="true"}
## Hint

Use `ones(m)` to generate a vector of 1 of length $m$.
:::

```{julia}
#| code-fold: true
#| code-summary: "Show the answer"
m = length(dataset.Time)
X = [ones(m) dataset.Time]
y = dataset.Mass
β = X\y
```

4. Plot the linear model on the same plot as the data. Use the `plot!` function. See the [basic concepts for plotting](https://docs.juliaplots.org/stable/basics/#Basic-Concepts).

```{julia}
#| code-fold: true
#| code-summary: "Show the answer"
x = [5, 20]
y = β[1] .+ β[2]*x
plot!(plt, x, y)
```